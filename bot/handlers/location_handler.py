import json
import re
from math import radians, sin, cos, sqrt, atan2
from telegram import Update, Location
from telegram.ext import CallbackContext, MessageHandler, filters

# –ì–∞–≤–µ—Ä—Å–∏–Ω —Ñ–æ—Ä–º—É–ª–∞—Å—ã –∞—Ä“õ—ã–ª—ã –µ–∫—ñ –Ω“Ø–∫—Ç–µ –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã “õ–∞—à—ã“õ—Ç—ã“õ—Ç—ã –µ—Å–µ–ø—Ç–µ—É (–∫–º)
def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371.0  # –ñ–µ—Ä–¥—ñ“£ —Ä–∞–¥–∏—É—Å—ã –∫–∏–ª–æ–º–µ—Ç—Ä–º–µ–Ω

    lat1_rad = radians(lat1)
    lon1_rad = radians(lon1)
    lat2_rad = radians(lat2)
    lon2_rad = radians(lon2)

    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad

    a = sin(dlat / 2)**2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance

# 2GIS —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω–µ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—Ç–∞—Ä–¥—ã –∞–ª—É
def extract_coords_from_2gis_link(link):
    # 'm=' –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω–µ–Ω –∫–µ–π—ñ–Ω–≥—ñ —Å–∞–Ω–¥–∞—Ä–¥—ã —ñ–∑–¥–µ–π–º—ñ–∑
    match = re.search(r'm=([\d.]+),([\d.]+)', link)
    if match:
        # 2GIS —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω–¥–µ –±—ñ—Ä—ñ–Ω—à—ñ longitude, —Å–æ—Å—ã–Ω latitude –∫–µ–ª–µ–¥—ñ
        lon, lat = map(float, match.groups())
        return lat, lon
    return None, None

# –õ–æ–∫–∞—Ü–∏—è–Ω—ã ”©“£–¥–µ–π—Ç—ñ–Ω –Ω–µ–≥—ñ–∑–≥—ñ —Ñ—É–Ω–∫—Ü–∏—è
def location_handler(update: Update, context: CallbackContext):
    user_location: Location = update.message.location
    user_lat = user_location.latitude
    user_lon = user_location.longitude

    update.message.reply_text("–•–∞–ª–∞–ª –º–µ–∫–µ–º–µ–ª–µ—Ä–¥—ñ —ñ–∑–¥–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω, —Å”ô–ª –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑...")

    try:
        # JSON —Ñ–∞–π–ª—ã–Ω –∞—à—É (—Ñ–∞–π–ª–¥—ã“£ –¥“±—Ä—ã—Å –∂–æ–ª—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑)
        with open('qmdb_data_json.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        update.message.reply_text("–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–∫–µ–º–µ–ª–µ—Ä –±–∞–∑–∞—Å—ã —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return
    except json.JSONDecodeError:
        update.message.reply_text("–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –¥–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω—ã“£ —Ñ–æ—Ä–º–∞—Ç—ã –¥“±—Ä—ã—Å –µ–º–µ—Å.")
        return
        
    organizations = data['data']['organizations']
    nearby_establishments = []

    for org in organizations:
        # `maplink` –º–∞—Å—Å–∏–≤—ñ–Ω–¥–µ–≥—ñ –±—ñ—Ä—ñ–Ω—à—ñ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –∞–ª–∞–º—ã–∑
        if org.get('maplink') and len(org['maplink']) > 0 and 'link' in org['maplink'][0]:
            map_link = org['maplink'][0]['link']
            lat, lon = extract_coords_from_2gis_link(map_link)
            
            if lat and lon:
                distance = calculate_distance(user_lat, user_lon, lat, lon)
                
                # “ö–∞—à—ã“õ—Ç—ã“ì—ã 100 –∫–º-–¥–µ–Ω –∞–∑ –º–µ–∫–µ–º–µ–ª–µ—Ä–¥—ñ “ì–∞–Ω–∞ “õ–æ—Å–∞–º—ã–∑ (“õ–∞–ª–∞—É—ã“£—ã–∑—à–∞ ”©–∑–≥–µ—Ä—Ç—É–≥–µ –±–æ–ª–∞–¥—ã)
                if distance < 100:
                    org['distance'] = distance
                    nearby_establishments.append(org)

    # –ú–µ–∫–µ–º–µ–ª–µ—Ä–¥—ñ “õ–∞—à—ã“õ—Ç—ã“ì—ã –±–æ–π—ã–Ω—à–∞ —Å“±—Ä—ã–ø—Ç–∞—É
    sorted_establishments = sorted(nearby_establishments, key=lambda x: x['distance'])
    
    # –ê–ª“ì–∞—à“õ—ã 5 –º–µ–∫–µ–º–µ–Ω—ñ –∞–ª—É
    top_5_establishments = sorted_establishments[:5]

    if not top_5_establishments:
        update.message.reply_text("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –∂–∞“õ—ã–Ω –∂–µ—Ä–¥–µ–Ω —Ö–∞–ª–∞–ª –º–µ–∫–µ–º–µ–ª–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return

    response_message = "üìç **–°—ñ–∑–≥–µ –µ“£ –∂–∞“õ—ã–Ω 5 —Ö–∞–ª–∞–ª –º–µ–∫–µ–º–µ:**\n\n"
    
    for org in top_5_establishments:
        distance_str = f"{org['distance'] * 1000:.0f} –º" if org['distance'] < 1 else f"{org['distance']:.1f} –∫–º"
        
        # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—Ç—ã“£ –∂–∞—Ä–∞–º–¥—ã–ª—ã“õ –º–µ—Ä–∑—ñ–º—ñ–Ω –∞–ª—É (—Ñ–æ—Ä–º–∞—Ç—ã ”ô—Ä—Ç“Ø—Ä–ª—ñ –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω, —Å–æ“ì–∞–Ω –¥–∞–π—ã–Ω–¥–∞–ª—É –∫–µ—Ä–µ–∫)
        sert_date = org.get('sert_date', '–ë–µ–ª–≥—ñ—Å—ñ–∑') # –ú—ã—Å–∞–ª “Ø—à—ñ–Ω, –µ–≥–µ—Ä –∂–æ“õ –±–æ–ª—Å–∞
        
        # –ú–µ–∫–µ–Ω–∂–∞–π–¥—ã –∞–ª—É
        address = "–ú–µ–∫–µ–Ω–∂–∞–π—ã –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω"
        if org.get('maplink') and len(org['maplink']) > 0 and 'address' in org['maplink'][0]:
            address = org['maplink'][0]['address']

        # 2GIS —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∞–ª—É
        gis_link = ""
        if org.get('maplink') and len(org['maplink']) > 0 and 'link' in org['maplink'][0]:
            gis_link = f"‚û°Ô∏è 2GIS-—Ç–µ –∞—à—É ({org['maplink'][0]['link']})"

        response_message += (
            f"üè¢ **{org.get('title', '–ê—Ç—ã –∂–æ“õ')}**\n"
            f"‚ÑπÔ∏è –°–∞–Ω–∞—Ç—ã: {org.get('category', {}).get('title', '–ë–µ–ª–≥—ñ—Å—ñ–∑')}\n"
            f"üó∫Ô∏è –ú–µ–∫–µ–Ω–∂–∞–π—ã: {address}\n"
            f"üìè “ö–∞—à—ã“õ—Ç—ã“ì—ã: {distance_str}\n"
            f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∂–∞—Ä–∞–º–¥—ã ({sert_date})\n"
            # f"üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—Ç—ã –∫”©—Ä—É\n"  # –ë“±“ì–∞–Ω —Å—ñ–ª—Ç–µ–º–µ JSON-–¥–∞ –∂–æ“õ, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ “õ–æ—Å—ã–º—à–∞ –¥–µ—Ä–µ–∫ –∫–µ—Ä–µ–∫
            f"{gis_link}\n\n"
        )

    # Markdown —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω parse_mode –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞–º—ã–∑
    update.message.reply_text(response_message, parse_mode='Markdown')


# –ë“±–ª —Ö—ç–Ω–¥–ª–µ—Ä–¥—ñ –Ω–µ–≥—ñ–∑–≥—ñ —Ñ–∞–π–ª–¥–∞ —Ç—ñ—Ä–∫–µ—É –∫–µ—Ä–µ–∫:
# dispatcher.add_handler(MessageHandler(Filters.location, location_handler))