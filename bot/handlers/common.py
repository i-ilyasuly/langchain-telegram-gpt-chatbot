# bot/handlers/common.py

import logging
import re
import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from google.cloud import vision
from datetime import datetime
from bot.config import ADMIN_USER_IDS, FREE_TEXT_LIMIT, FREE_PHOTO_LIMIT
from bot.database import add_or_update_user, is_user_premium, get_user_usage, reset_user_limits, increment_request_count
from bot.database import get_user_language

# --- –ò–º–ø–æ—Ä—Ç—Ç–∞—Ä–¥—ã —Ä–µ—Ç—Ç–µ—É ---
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —É—Ç–∏–ª–∏—Ç–∞–ª–∞—Ä –∂”ô–Ω–µ –±–∞–∑–∞–¥–∞–Ω “õ–∞–∂–µ—Ç—Ç—ñ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä–¥—ã –±—ñ—Ä –∂–µ—Ä–≥–µ –∂–∏–Ω–∞—É
from bot.config import ADMIN_USER_IDS
from bot.utils import get_text, get_language_instruction, run_openai_assistant, client_openai
from bot.database import add_or_update_user, is_user_premium

# --- –ù–µ–≥—ñ–∑–≥—ñ –±–∞–ø—Ç–∞—É–ª–∞—Ä ---
logger = logging.getLogger(__name__)
client_vision = vision.ImageAnnotatorClient()


# --- –•—ç–Ω–¥–ª–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, –∞–ª–¥—ã–º–µ–Ω —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞—É–¥—ã —Å“±—Ä–∞–π–¥—ã."""
    user = update.effective_user
    add_or_update_user(user.id, user.full_name, user.username, user.language_code)
    context.user_data.pop('thread_id', None)
    
    keyboard = [
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data='set_lang_kk_start')],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='set_lang_ru_start')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)


async def premium_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/premium –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, –∂–∞–∑—ã–ª—ã–º —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ–¥—ñ."""
    premium_text = (
        "üëë *Premium –ñ–∞–∑—ã–ª—ã–º –ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã*\n\n"
        "‚úÖ –®–µ–∫—Ç–µ—É—Å—ñ–∑ –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä\n"
        "‚úÖ –°—É—Ä–µ—Ç –∞—Ä“õ—ã–ª—ã ”©–Ω—ñ–º–¥—ñ —Ç–∞–ª–¥–∞—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ\n"
        "‚úÖ –ñ–∞—É–∞–ø –∞–ª—É –∫–µ–∑–µ–≥—ñ–Ω–¥–µ –±—ñ—Ä—ñ–Ω—à—ñ –æ—Ä—ã–Ω\n\n"
        "–ñ–∞–∑—ã–ª—ã–º–¥—ã —Å–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω –∞–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑: @ilyasuly" # ”®–∑ –∞–¥–º–∏–Ω username-—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑
    )
    await update.message.reply_text(premium_text, parse_mode='Markdown')

async def check_user_limits(user: dict, request_type: str, lang_code: str) -> str | None:
    """“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ª–∏–º–∏—Ç—Ç–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ –∂”ô–Ω–µ “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ –∂–∞“£–∞—Ä—Ç–∞–¥—ã."""
    if is_user_premium(user.id) or user.id in ADMIN_USER_IDS:
        return None # –ü—Ä–µ–º–∏—É–º –Ω–µ–º–µ—Å–µ –∞–¥–º–∏–Ω –±–æ–ª—Å–∞, —à–µ–∫—Ç–µ—É –∂–æ“õ

    text_count, photo_count, last_date = get_user_usage(user.id)
    today_str = datetime.now().strftime("%Y-%m-%d")

    if last_date != today_str:
        reset_user_limits(user.id)
        text_count, photo_count = 0, 0
    
    limit_message = None
    if request_type == 'text':
        if text_count >= FREE_TEXT_LIMIT:
            limit_message = get_text('limit_reached_text', lang_code).format(limit=FREE_TEXT_LIMIT)
    elif request_type == 'photo':
        if photo_count >= FREE_PHOTO_LIMIT:
            limit_message = get_text('limit_reached_photo', lang_code).format(limit=FREE_PHOTO_LIMIT)

    if limit_message:
        return limit_message + "\n" + get_text('limit_reset_info', lang_code)
    
    # –õ–∏–º–∏—Ç –∂–µ—Ç–ø–µ—Å–µ, —Å–∞–Ω–∞—É—ã—à—Ç—ã –∞—Ä—Ç—Ç—ã—Ä–∞–º—ã–∑
    increment_request_count(user.id, request_type)
    return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—ñ—Ä—ñ—Å –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ–π–¥—ñ."""
    user = update.effective_user
    lang_code = get_user_language(user.id)

    # --- –õ–∏–º–∏—Ç —Ç–µ–∫—Å–µ—Ä—ñ—Å—ñ ---
    limit_error = await check_user_limits(user, 'text', lang_code)
    if limit_error:
        await update.message.reply_text(limit_error)
        return
    
    user_query_original = update.message.text.strip()
    logger.info(f"User {user.id} ({user.full_name}) sent text: '{user_query_original}'")

    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    language_instruction = get_language_instruction(lang_code)
    user_query_for_ai = language_instruction + user_query_original
    waiting_message = await update.message.reply_text(random.choice(get_text('waiting_messages', lang_code)))
    
    try:
        thread_id = context.user_data.get('thread_id')
        response_text, new_thread_id, run = await run_openai_assistant(user_query_for_ai, thread_id)
        if run is None:
             await waiting_message.edit_text(response_text)
             return
        context.user_data['thread_id'] = new_thread_id
        
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            run = await client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
        
        if run.status == 'completed':
            messages = await client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            logger.info(f"Bot response for user {user.id}: '{cleaned_response[:100]}...'")
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data[f'last_question_{waiting_message.message_id}'] = user_query_original
            context.user_data[f'last_answer_{waiting_message.message_id}'] = cleaned_response
        else:
            # –ï–≥–µ—Ä OpenAI Assistant-—Ç—ã“£ –∂“±–º—ã—Å—ã 'completed' —Å—Ç–∞—Ç—É—Å—ã–º–µ–Ω –∞—è“õ—Ç–∞–ª–º–∞—Å–∞
            error_message = "–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ"
            if run.last_error:
                error_message = run.last_error.message
            
            # “ö–∞—Ç–µ–Ω—ñ –∂—É—Ä–Ω–∞–ª“ì–∞ (–ª–æ–≥“õ–∞) —Ç–æ–ª—ã“õ –∂–∞–∑–∞–º—ã–∑
            logger.error(f"OpenAI Assistant –∂“±–º—ã—Å—ã –∞—è“õ—Ç–∞–ª–º–∞–¥—ã, —Å—Ç–∞—Ç—É—Å—ã: {run.status}, “õ–∞—Ç–µ: {error_message}")
            
            # “ö–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –±–µ—Ä–µ–º—ñ–∑
            user_friendly_error = (
                "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∂–∞—É–∞–ø—Ç—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.\n\n"
                f"–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç: `{run.status}`"
            )
            await waiting_message.edit_text(user_friendly_error, parse_mode='Markdown')

    except Exception as e:
        # –ë“±–ª –±–ª–æ–∫ –µ–Ω–¥—ñ —Ç–µ–∫ –∫“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ–ª–µ—Ä–¥—ñ (–º—ã—Å–∞–ª—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω—ã“£ “Ø–∑—ñ–ª—É—ñ, –∫–æ–¥—Ç–∞“ì—ã –±–∞—Å“õ–∞ “õ–∞—Ç–µ–ª–µ—Ä) “±—Å—Ç–∞–π–¥—ã
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ –∫“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ (User ID: {user.id}): {e}", exc_info=True)
        await waiting_message.edit_text(
            "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∫“Ø—Ç–ø–µ–≥–µ–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. "
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑."
        )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—ñ—Ä—ñ—Å —Å—É—Ä–µ—Ç—Ç–µ—Ä–¥—ñ ”©“£–¥–µ–π–¥—ñ."""
    user = update.effective_user
    lang_code = get_user_language(user.id)

    # --- –õ–∏–º–∏—Ç —Ç–µ–∫—Å–µ—Ä—ñ—Å—ñ ---
    limit_error = await check_user_limits(user, 'photo', lang_code)
    if limit_error:
        await update.message.reply_text(limit_error)
        return

    logger.info(f"User {user.id} ({user.full_name}) sent a photo.")
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    waiting_message = await update.message.reply_text(random.choice(get_text('waiting_messages', lang_code)))
    
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image = vision.Image(content=bytes(photo_bytes))
        response = client_vision.text_detection(image=image)
        if response.error.message:
            raise Exception(f"Google Vision API “õ–∞—Ç–µ—Å—ñ: {response.error.message}")
        texts = response.text_annotations
        image_description = texts[0].description.replace('\n', ' ') if texts else "–°—É—Ä–µ—Ç—Ç–µ–Ω –º”ô—Ç—ñ–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã."
        
        await waiting_message.edit_text(get_text('photo_analyzed_prompt', lang_code))
        
        language_instruction = get_language_instruction(lang_code)
        final_query_to_openai = (
    f"{language_instruction} "
    f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º–∞“ì–∞–Ω —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä–¥—ñ. Google Vision —Å—É—Ä–µ—Ç—Ç–µ–Ω –º—ã–Ω–∞–¥–∞–π –º”ô—Ç—ñ–Ω–¥—ñ –æ“õ—ã–¥—ã: '{image_description}'.\n\n"
    "–û—Å—ã –º”ô—Ç—ñ–Ω–¥–µ–≥—ñ –Ω–µ–≥—ñ–∑–≥—ñ –∞—Ç–∞—É–ª–∞—Ä–¥—ã –∞–Ω—ã“õ—Ç–∞–ø, —Å–æ–ª –±–æ–π—ã–Ω—à–∞ ”©–∑—ñ“£–Ω—ñ“£ –±—ñ–ª—ñ–º “õ–æ—Ä—ã“£–Ω–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã —ñ–∑–¥–µ. "
    "–¢–∞–±—ã–ª“ì–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ, —Å—É—Ä–µ—Ç—Ç–µ–≥—ñ ”©–Ω—ñ–º–Ω—ñ“£ —Ö–∞–ª–∞–ª —Å—Ç–∞—Ç—É—Å—ã —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“õ –∂–∞—É–∞–ø –±–µ—Ä. "
    "–ú–∞“£—ã–∑–¥—ã –µ—Ä–µ–∂–µ: –ï—à“õ–∞—à–∞–Ω —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä–¥—ñ –æ–π–¥–∞–Ω “õ“±—Ä–∞—Å—Ç—ã—Ä–º–∞ –∂”ô–Ω–µ bit.ly —Å–∏—è“õ—Ç—ã —Å–µ—Ä–≤–∏—Å—Ç–µ—Ä–º–µ–Ω “õ—ã—Å“õ–∞—Ä—Ç–ø–∞. –¢–µ–∫ –±—ñ–ª—ñ–º “õ–æ—Ä—ã–Ω–¥–∞ –±–∞—Ä –Ω–∞“õ—Ç—ã, —Ç–æ–ª—ã“õ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ “ì–∞–Ω–∞ –±–µ—Ä."
)
        
        thread_id = context.user_data.get('thread_id')
        response_text, new_thread_id, run = await run_openai_assistant(final_query_to_openai, thread_id)
        if run is None:
            await waiting_message.edit_text(response_text)
            return
        context.user_data['thread_id'] = new_thread_id
        
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            run = await client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
            
        if run.status == 'completed':
            messages = await client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data[f'last_question_{waiting_message.message_id}'] = f"Image Query: {image_description}"
            context.user_data[f'last_answer_{waiting_message.message_id}'] = cleaned_response
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            await waiting_message.edit_text(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {error_message}")
    except Exception as e:
        logger.error(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ (User ID: {user.id}): {e}")
        await waiting_message.edit_text("–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã.")

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/language –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, —Ç—ñ–ª —Ç–∞“£–¥–∞—É –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä–µ–¥—ñ."""
    keyboard = [
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data='set_lang_kk')],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='set_lang_ru')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)
