# bot/handlers/common.py

import logging
import re
import random
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from google.cloud import vision

# --- –ñ–æ–±–∞–Ω—ã“£ —ñ—à–∫—ñ –∏–º–ø–æ—Ä—Ç—Ç–∞—Ä—ã ---
from bot.config import ADMIN_USER_IDS, FREE_TEXT_LIMIT, FREE_PHOTO_LIMIT
from bot.utils import get_text, get_language_instruction, run_openai_assistant
from bot.database import (
    add_or_update_user, is_user_premium, get_user_language,
    set_thread_id, get_thread_id, set_last_q_and_a,
    check_and_increment_usage
)
from openai import AsyncOpenAI
from bot.config import OPENAI_API_KEY
client_openai = AsyncOpenAI(api_key=OPENAI_API_KEY)


# --- –ù–µ–≥—ñ–∑–≥—ñ –±–∞–ø—Ç–∞—É–ª–∞—Ä ---
logger = logging.getLogger(__name__)
client_vision = vision.ImageAnnotatorClient()


# --- –•—ç–Ω–¥–ª–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, –∞–ª–¥—ã–º–µ–Ω —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞—É–¥—ã —Å“±—Ä–∞–π–¥—ã."""
    user = update.effective_user
    add_or_update_user(user.id, user.full_name, user.username, user.language_code)
    set_thread_id(user.id, None)  # –°“±—Ö–±–∞—Ç—Ç—ã –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ —Ç–∞–∑–∞–ª–∞–π–º—ã–∑
    
    keyboard = [
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data='set_lang_kk_start')],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='set_lang_ru_start')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)


async def premium_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/premium –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, –∂–∞–∑—ã–ª—ã–º —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ–¥—ñ."""
    user = update.effective_user
    lang_code = get_user_language(user.id)
    premium_text = get_text('premium_info_text', lang_code)
    await update.message.reply_text(premium_text, parse_mode='Markdown')


async def check_user_limits(user: dict, request_type: str, lang_code: str) -> str | None:
    """“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ª–∏–º–∏—Ç—Ç–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ –∂”ô–Ω–µ “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ –∂–∞“£–∞—Ä—Ç–∞–¥—ã."""
    if is_user_premium(user.id) or user.id in ADMIN_USER_IDS:
        return None

    # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: –õ–∏–º–∏—Ç—Ç–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä–µ—Ç—ñ–Ω –∂”ô–Ω–µ —Å–∞–Ω–∞–π—Ç—ã–Ω —Å–µ–Ω—ñ–º–¥—ñ—Ä–µ–∫ –ª–æ–≥–∏–∫–∞
    limit = FREE_TEXT_LIMIT if request_type == 'text' else FREE_PHOTO_LIMIT
    can_proceed = check_and_increment_usage(user.id, request_type, limit)

    if not can_proceed:
        key = 'limit_reached_text' if request_type == 'text' else 'limit_reached_photo'
        limit_message = get_text(key, lang_code).format(limit=limit)
        return limit_message + "\n" + get_text('limit_reset_info', lang_code)
    
    return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—ñ—Ä—ñ—Å –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ–π–¥—ñ."""
    user = update.effective_user
    lang_code = get_user_language(user.id)

    limit_error = await check_user_limits(user, 'text', lang_code)
    if limit_error:
        await update.message.reply_text(limit_error)
        return
    
    user_query_original = update.message.text.strip()
    logger.info(f"User {user.id} ({user.full_name}) sent text: '{user_query_original}'")

    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    language_instruction = get_language_instruction(lang_code)
    user_query_for_ai = language_instruction + user_query_original
    
    try:
        waiting_message = await update.message.reply_text(random.choice(get_text('waiting_messages', lang_code)))
        
        # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: thread_id –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω –∞–ª—ã–Ω–∞–¥—ã
        thread_id = get_thread_id(user.id)
        response_text, new_thread_id, run = await run_openai_assistant(user_query_for_ai, thread_id)
        
        if run is None:
             await waiting_message.edit_text(response_text)
             return
        
        # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: –∂–∞“£–∞ thread_id –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞–ª–∞–¥—ã
        set_thread_id(user.id, new_thread_id)
        
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            run = await client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
        
        if run.status == 'completed':
            messages = await client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup, parse_mode='Markdown')
            
            # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: –ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫“õ–æ—Ä–¥—ã “õ–æ–ª–¥–∞–Ω—É
            set_last_q_and_a(user.id, user_query_original, cleaned_response)
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            logger.error(f"OpenAI Assistant run –∞—è“õ—Ç–∞–ª–º–∞–¥—ã, —Å—Ç–∞—Ç—É—Å—ã: {run.status}, “õ–∞—Ç–µ: {error_message}")
            await waiting_message.edit_text(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {run.status}")

    except Exception as e:
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ –∫“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ (User ID: {user.id}): {e}", exc_info=True)
        await update.message.reply_text("–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∫“Ø—Ç–ø–µ–≥–µ–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—ñ—Ä—ñ—Å —Å—É—Ä–µ—Ç—Ç–µ—Ä–¥—ñ ”©“£–¥–µ–π–¥—ñ."""
    user = update.effective_user
    lang_code = get_user_language(user.id)

    limit_error = await check_user_limits(user, 'photo', lang_code)
    if limit_error:
        await update.message.reply_text(limit_error)
        return

    logger.info(f"User {user.id} ({user.full_name}) sent a photo.")
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        waiting_message = await update.message.reply_text(random.choice(get_text('waiting_messages', lang_code)))
        
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image = vision.Image(content=bytes(photo_bytes))
        response = client_vision.text_detection(image=image)
        texts = response.text_annotations
        
        if response.error.message and not texts:
            raise Exception(f"Google Vision API “õ–∞—Ç–µ—Å—ñ: {response.error.message}")
            
        image_description = texts[0].description.replace('\n', ' ') if texts else "–°—É—Ä–µ—Ç—Ç–µ–Ω –º”ô—Ç—ñ–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã."
        
        await waiting_message.edit_text(get_text('photo_analyzed_prompt', lang_code))
        
        language_instruction = get_language_instruction(lang_code)
        final_query_to_openai = (
            f"{language_instruction} "
            f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º–∞“ì–∞–Ω —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä–¥—ñ. Google Vision —Å—É—Ä–µ—Ç—Ç–µ–Ω –º—ã–Ω–∞–¥–∞–π –º”ô—Ç—ñ–Ω–¥—ñ –æ“õ—ã–¥—ã: '{image_description}'.\n\n"
            "–û—Å—ã –º”ô—Ç—ñ–Ω–≥–µ —Å“Ø–π–µ–Ω—ñ–ø, ”©–Ω—ñ–º–Ω—ñ“£ —Ö–∞–ª–∞–ª —Å—Ç–∞—Ç—É—Å—ã —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“õ –∂–∞—É–∞–ø –±–µ—Ä."
        )
        
        # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: thread_id –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω –∞–ª—ã–Ω–∞–¥—ã
        thread_id = get_thread_id(user.id)
        response_text, new_thread_id, run = await run_openai_assistant(final_query_to_openai, thread_id)
        
        if run is None:
            await waiting_message.edit_text(response_text)
            return
            
        # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: –∂–∞“£–∞ thread_id –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞–ª–∞–¥—ã
        set_thread_id(user.id, new_thread_id)
        
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            run = await client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
            
        if run.status == 'completed':
            messages = await client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup, parse_mode='Markdown')
            
            # –¢“Æ–ó–ï–¢–Ü–õ–î–Ü: –ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫“õ–æ—Ä–¥—ã “õ–æ–ª–¥–∞–Ω—É
            set_last_q_and_a(user.id, f"Image Query: {image_description[:100]}...", cleaned_response)
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            await waiting_message.edit_text(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {run.status}")
            
    except Exception as e:
        logger.error(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ (User ID: {user.id}): {e}", exc_info=True)
        await update.message.reply_text("–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ –∫“Ø—Ç–ø–µ–≥–µ–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")


async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/language –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, —Ç—ñ–ª —Ç–∞“£–¥–∞—É –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä–µ–¥—ñ."""
    user = update.effective_user
    lang_code = get_user_language(user.id)
    keyboard = [
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data='set_lang_kk')],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='set_lang_ru')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(get_text('change_language_button', lang_code), reply_markup=reply_markup)