# main.py

import os
import asyncio
import re
import random
import csv
from datetime import datetime
import logging
import json # <--- –î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –ò–ú–ü–û–†–¢

# --- –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π API –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# <--- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô –î–õ–Ø GOOGLE CREDENTIALS ---
# 1. –ß–∏—Ç–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
gcp_credentials_json_str = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')

# 2. –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –Ω–µ–º—É
if gcp_credentials_json_str:
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        json.loads(gcp_credentials_json_str)
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
        creds_path = "/tmp/gcp_creds.json"
        with open(creds_path, "w") as f:
            f.write(gcp_credentials_json_str)
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–ª–∞ –Ω–∞ –ü–£–¢–¨ –∫ —Ñ–∞–π–ª—É
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = creds_path
        logger.info("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Cloud.")
        
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ GOOGLE_APPLICATION_CREDENTIALS.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google: {e}")
# <--- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –î–õ–Ø GOOGLE CREDENTIALS ---

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, 
    CallbackQueryHandler, ConversationHandler,
)
import openai
from openai import OpenAI
from dotenv import load_dotenv
from google.cloud import vision

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ADMIN_USER_IDS = [929307596]
USER_IDS_FILE = "user_ids.csv"
BROADCAST_MESSAGE = range(1)

WAITING_MESSAGES = [
    "‚è≥ –¢–∞–ª–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", "ü§î –Ü–∑–¥–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", "üîé –ê–∑ “õ–∞–ª–¥—ã...",
    "‚úçÔ∏è –ñ–∞—É–∞–ø—Ç—ã –¥–∞–π—ã–Ω–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", "‚ú® –ú—ñ–Ω–µ-–º—ñ–Ω–µ, –¥–∞–π—ã–Ω –±–æ–ª–∞–¥—ã..."
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
client_openai = OpenAI(api_key=OPENAI_API_KEY)
client_vision = vision.ImageAnnotatorClient() # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å

# ... (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —è –µ–≥–æ –ø—Ä–∏–≤–µ–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∏–∂–µ)
# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö ---
def add_user_info(user):
    user_id = user.id
    full_name = user.full_name
    username = user.username or "N/A"
    lang_code = user.language_code or "N/A"
    try:
        user_ids = set()
        file_exists = os.path.exists(USER_IDS_FILE)
        if file_exists and os.path.getsize(USER_IDS_FILE) > 0:
            with open(USER_IDS_FILE, 'r', newline='', encoding='utf-8') as f:
                reader = csv.reader(f)
                try:
                    next(reader, None)
                    user_ids = {int(row[0]) for row in reader if row}
                except (ValueError, IndexError):
                    pass
        if user_id not in user_ids:
            with open(USER_IDS_FILE, 'a', newline='', encoding='utf-8') as f:
                fieldnames = ['user_id', 'full_name', 'username', 'language_code']
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                if not file_exists or os.path.getsize(USER_IDS_FILE) == 0:
                    writer.writeheader()
                writer.writerow({'user_id': user_id, 'full_name': full_name, 'username': username, 'language_code': lang_code})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Telegram-–±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user_info(user)
    context.user_data.pop('thread_id', None)
    
    keyboard = [
        [InlineKeyboardButton("üìù –°–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data='ask_text')],
        [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ", callback_data='ask_photo')],
    ]
    if user.id in ADMIN_USER_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = "Assalamualaikum! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def broadcast_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in ADMIN_USER_IDS:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        return BROADCAST_MESSAGE
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == 'ask_text':
        await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ E-–¥–æ–±–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
    elif query.data == 'ask_photo':
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    elif query.data == 'admin_panel':
        if user_id in ADMIN_USER_IDS:
            admin_keyboard = [
                [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='feedback_stats')],
                [InlineKeyboardButton("üßê –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data='suspicious_list')],
                [InlineKeyboardButton("üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='broadcast_start')],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", callback_data='update_db_placeholder')]
            ]
            reply_markup = InlineKeyboardMarkup(admin_keyboard)
            await query.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    elif query.data == 'feedback_stats':
        if user_id in ADMIN_USER_IDS:
            await feedback_stats(update, context)
    elif query.data == 'suspicious_list':
        if user_id in ADMIN_USER_IDS:
            await suspicious_list(update, context)
    elif query.data == 'update_db_placeholder':
        if user_id in ADMIN_USER_IDS:
            await query.message.reply_text("‚ÑπÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data in ['like', 'dislike']:
        await feedback_button_callback(update, context)

async def broadcast_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if admin_id not in ADMIN_USER_IDS:
        return ConversationHandler.END
    message_text = update.message.text
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message_text}' —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    user_ids = set()
    if os.path.exists(USER_IDS_FILE):
        with open(USER_IDS_FILE, 'r', newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader, None)
            user_ids = {int(row[0]) for row in reader if row}
    sent_count = 0
    failed_count = 0
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            failed_count += 1
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")
    await update.message.reply_text(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}")
    return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def run_openai_assistant(user_query: str, thread_id: str | None) -> tuple[str, str, object]:
    if not OPENAI_ASSISTANT_ID: 
        return "–û—à–∏–±–∫–∞: OPENAI_ASSISTANT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env.", thread_id, None
    try:
        if thread_id is None:
            run = client_openai.beta.threads.create_and_run(
                assistant_id=OPENAI_ASSISTANT_ID,
                thread={"messages": [{"role": "user", "content": user_query}]}
            )
            thread_id = run.thread_id
        else:
            client_openai.beta.threads.messages.create(thread_id=thread_id, role="user", content=user_query)
            run = client_openai.beta.threads.runs.create(thread_id=thread_id, assistant_id=OPENAI_ASSISTANT_ID)
        return "", thread_id, run
    except openai.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Å–µ—Ä–≤–∏—Å–µ OpenAI –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.", thread_id, None
    except openai.RateLimitError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI: {e}")
        return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", thread_id, None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ OpenAI Assistant: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", thread_id, None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user_query = update.message.text.strip()
    
    waiting_message = await update.message.reply_text(random.choice(WAITING_MESSAGES))
    
    try:
        thread_id = context.user_data.get('thread_id')
        response_text, new_thread_id, run = await run_openai_assistant(user_query, thread_id)
        
        if run is None:
             await waiting_message.edit_text(response_text)
             return

        context.user_data['thread_id'] = new_thread_id
        
        last_message_text = ""
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            current_message_text = random.choice(WAITING_MESSAGES)
            if current_message_text != last_message_text:
                try:
                    await waiting_message.edit_text(current_message_text)
                    last_message_text = current_message_text
                except Exception:
                    pass
            run = client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
        
        if run.status == 'completed':
            messages = client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup)
            
            context.user_data[f'last_question_{waiting_message.message_id}'] = user_query
            context.user_data[f'last_answer_{waiting_message.message_id}'] = cleaned_response
        else:
            error_message = run.last_error.message if run.last_error else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            await waiting_message.edit_text(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {error_message}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await waiting_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    waiting_message = await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        image = vision.Image(content=bytes(photo_bytes))
        response = client_vision.text_detection(image=image)
        
        if response.error.message:
            raise Exception(f"–û—à–∏–±–∫–∞ Google Vision API: {response.error.message}")

        texts = response.text_annotations
        image_description = texts[0].description.replace('\n', ' ') if texts else "–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        await waiting_message.edit_text("‚úÖ –§–æ—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenAI...")
        
        final_query_to_openai = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ —Ñ–æ—Ç–æ. Google Vision –ø—Ä–æ—á–∏—Ç–∞–ª —Å —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç: '{image_description}'.\n\n"
            f"–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–ø—Ä–æ–¥—É–∫—Ç, –±—Ä–µ–Ω–¥, –∑–∞–≤–µ–¥–µ–Ω–∏–µ) –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ –∏ "
            f"–Ω–∞–π–¥–∏ –ø–æ –Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (—Ñ–∞–π–ª–∞—Ö). –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, "
            f"–¥–∞–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Ö–∞–ª—è–ª—å-—Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ. "
            f"–í–∞–∂–Ω–æ! –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ö–∞–ª—è–ª—å-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤–µ—Ä—å –º–æ–∏–º —Å–ª–æ–≤–∞–º '—Ö–∞–ª—è–ª—å', '–µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' –∏ —Ç.–ø., –∞ –∏—â–∏ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ! \n\n"
        )
        
        thread_id = context.user_data.get('thread_id')
        response_text, new_thread_id, run = await run_openai_assistant(final_query_to_openai, thread_id)

        if run is None:
            await waiting_message.edit_text(response_text)
            return
            
        context.user_data['thread_id'] = new_thread_id
        
        last_message_text = ""
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            current_message_text = random.choice(WAITING_MESSAGES)
            if current_message_text != last_message_text:
                try:
                    await waiting_message.edit_text(current_message_text)
                    last_message_text = current_message_text
                except Exception:
                    pass
            run = client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
        
        if run.status == 'completed':
            messages = client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup)

            context.user_data[f'last_question_{waiting_message.message_id}'] = f"Image Query: {image_description}"
            context.user_data[f'last_answer_{waiting_message.message_id}'] = cleaned_response
        else:
            error_message = run.last_error.message if run.last_error else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            await waiting_message.edit_text(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {error_message}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await waiting_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def feedback_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    await query.edit_message_reply_markup(reply_markup=None)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_id = query.from_user.id
    vote = query.data
    message_id = query.message.message_id
    question = context.user_data.get(f'last_question_{message_id}', '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    bot_answer = context.user_data.get(f'last_answer_{message_id}', '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    file_exists = os.path.isfile('feedback.csv')
    with open('feedback.csv', 'a', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['timestamp', 'user_id', 'question', 'bot_answer', 'vote']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists: writer.writeheader()
        writer.writerow({'timestamp': timestamp, 'user_id': user_id, 'question': question, 'bot_answer': bot_answer, 'vote': vote})
    logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'feedback.csv': –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '{vote}'.")

async def feedback_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def suspicious_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---

application = Application.builder().token(TELEGRAM_TOKEN).build()
app_fastapi = FastAPI()

@app_fastapi.on_event("startup")
async def startup_event():
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(broadcast_start_handler, pattern='^broadcast_start$')],
        states={BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message_handler)]},
        fallbacks=[CommandHandler('cancel', cancel_broadcast)],
        per_user=True,
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("feedback_stats", feedback_stats))
    application.add_handler(CommandHandler("suspicious_list", suspicious_list))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    await application.initialize()

    if WEBHOOK_URL and WEBHOOK_URL.startswith("https://"):
        await application.bot.set_webhook(
            url=f"{WEBHOOK_URL}/telegram",
            allowed_updates=Update.ALL_TYPES
        )
        logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Webhook: {WEBHOOK_URL}")
    else:
        logger.warning("‚ÑπÔ∏è WEBHOOK_URL –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ Webhook.")
        await application.bot.delete_webhook()

@app_fastapi.on_event("shutdown")
async def shutdown_event():
    await application.shutdown()
    logger.info("üîö –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@app_fastapi.post("/telegram")
async def telegram_webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    await application.process_update(update)
    return {"status": "ok"}

@app_fastapi.get("/")
def index():
    return {"message": "Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ webhook."}

if __name__ == '__main__':
    logger.info("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∫–æ–º–∞–Ω–¥—É:")
    logger.info("uvicorn main:app_fastapi --reload")