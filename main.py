import os
import base64
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from anthropic import Anthropic
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')

claude = Anthropic(api_key=CLAUDE_API_KEY)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°”ô–ª–µ–º! –ú–µ–Ω Claude AI –∞—Ä“õ—ã–ª—ã –∂“±–º—ã—Å –∂–∞—Å–∞–π—Ç—ã–Ω –±–æ—Ç–ø—ã–Ω.\n"
        "üìù –°“±—Ä–∞“õ “õ–æ–π—ã“£—ã–∑ - –∂–∞—É–∞–ø –±–µ—Ä–µ–π—ñ–Ω!\n"
        "üì∑ –°—É—Ä–µ—Ç –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ - –∞–Ω–∞–ª–∏–∑ –∂–∞—Å–∞–π–º—ã–Ω!\n"
        "üîç –°—É—Ä–µ—Ç—Ç–µ–≥—ñ –º”ô—Ç—ñ–Ω–¥—ñ —Ç–∞–Ω—ã–ø –æ“õ–∏ –∞–ª–∞–º—ã–Ω! ü§ñ\n"
        "‚ö° –ï–Ω–¥—ñ —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞—Ä“õ—ã–ª—ã –∂–∞—É–∞–ø –±–µ—Ä–µ–π—ñ–Ω!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –ë–æ—Å —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—ñ–ø, –∫–µ–π—ñ–Ω ”©–∑–≥–µ—Ä—Ç–µ–º—ñ–∑
        sent_message = await update.message.reply_text("üí≠...")
        
        full_response = ""
        
        with claude.messages.stream(
            model="claude-sonnet-4-20250514",
            max_tokens=1000,
            messages=[{"role": "user", "content": user_message}]
        ) as stream:
            for text in stream.text_stream:
                full_response += text
                # ”ò—Ä 50 —Å–∏–º–≤–æ–ª–¥–∞–Ω –∫–µ–π—ñ–Ω –Ω–µ–º–µ—Å–µ —Å”©–π–ª–µ–º –∞—è“õ—Ç–∞–ª“ì–∞–Ω–¥–∞ –∂–∞“£–∞—Ä—Ç—É
                if len(full_response) % 50 == 0 or text.endswith('.') or text.endswith('!') or text.endswith('?'):
                    try:
                        await sent_message.edit_text(full_response)
                    except:
                        pass  # Rate limit-—Ç–µ–Ω —Å–∞“õ—Ç–∞–Ω—É
        
        # –°–æ“£“ì—ã –Ω”ô—Ç–∏–∂–µ–Ω—ñ –∂–∞“£–∞—Ä—Ç—É
        await sent_message.edit_text(full_response)
        
    except Exception as e:
        await update.message.reply_text(f"“ö–∞—Ç–µ: {str(e)}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        response = requests.get(file.file_path)
        image_data = base64.b64encode(response.content).decode('utf-8')
        
        caption = update.message.caption or "–°—É—Ä–µ—Ç—Ç—ñ –∞–Ω–∞–ª–∏–∑ –∂–∞—Å–∞–ø, –Ω–µ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω—ñ–Ω –∞–π—Ç—ã“£—ã–∑. –ú”ô—Ç—ñ–Ω –±–∞—Ä –±–æ–ª—Å–∞ –æ“õ—ã–ø –±–µ—Ä—ñ“£—ñ–∑."
        
        sent_message = await update.message.reply_text("üîç –°—É—Ä–µ—Ç –∞–Ω–∞–ª–∏–∑ –∂–∞—Å–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", parse_mode='HTML')
        
        full_response = ""
        update_count = 0
        
        with claude.messages.stream(
            model="claude-sonnet-4-20250514",
            max_tokens=1500,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_data}},
                    {"type": "text", "text": caption}
                ]
            }]
        ) as stream:
            for text in stream.text_stream:
                full_response += text
                update_count += 1
                if update_count % 5 == 0 or text.endswith('.') or text.endswith('!') or text.endswith('?'):
                    try:
                        await sent_message.edit_text(full_response, parse_mode='HTML')
                    except:
                        continue
        
    except Exception as e:
        await update.message.reply_text(f"–°—É—Ä–µ—Ç –∞–Ω–∞–ª–∏–∑ “õ–∞—Ç–µ—Å—ñ: {str(e)}")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    print("–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã...")
    print("üìù –ú”ô—Ç—ñ–Ω | üì∑ –°—É—Ä–µ—Ç | üîç OCR | ‚ö° –°—Ç—Ä–∏–º–∏–Ω–≥")
    app.run_polling()

if __name__ == '__main__':
    main()