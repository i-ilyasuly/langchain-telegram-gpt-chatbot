import os
import time
import base64
import csv
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from anthropic import Anthropic
from openai import OpenAI
from dotenv import load_dotenv

# --- API –∫—ñ–ª—Ç—Ç–µ—Ä–¥—ñ –∂”ô–Ω–µ –±–∞–ø—Ç–∞—É–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')

# API –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä—ñ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
client_claude = Anthropic(api_key=CLAUDE_API_KEY)
client_openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Telegram –ë–æ—Ç—Ç—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ –ª–æ–≥–∏–∫–∞—Å—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('thread_id', None)
    await update.message.reply_text("–°”ô–ª–µ–º! –î–∏–∞–ª–æ–≥ –±–∞—Å—Ç–∞–ª–¥—ã. –•–∞–ª–∞–ª –º–µ–∫–µ–º–µ/“õ–æ—Å–ø–∞ —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ ”©–Ω—ñ–º–Ω—ñ“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")

async def run_openai_assistant(user_query: str, thread_id: str | None) -> tuple[str, str]:
    """OpenAI Assistant-—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—ã–ø, –∂–∞—É–∞–ø—Ç—ã –∂”ô–Ω–µ thread_id-–Ω—ã “õ–∞–π—Ç–∞—Ä–∞—Ç—ã–Ω —Ñ—É–Ω–∫—Ü–∏—è"""
    if not OPENAI_ASSISTANT_ID:
        return "“ö–∞—Ç–µ: OPENAI_ASSISTANT_ID .env —Ñ–∞–π–ª—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω.", thread_id
        
    try:
        if thread_id is None:
            thread = client_openai.beta.threads.create()
            thread_id = thread.id
        
        client_openai.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_query
        )

        run = client_openai.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=OPENAI_ASSISTANT_ID
        )

        while run.status in ['in_progress', 'queued']:
            time.sleep(1)
            run = client_openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)

        if run.status == 'completed':
            messages = client_openai.beta.threads.messages.list(thread_id=thread_id)
            assistant_response = messages.data[0].content[0].text.value
            return assistant_response, thread_id
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            return f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {error_message}", thread_id

    except Exception as e:
        print(f"OpenAI Assistant “õ–∞—Ç–µ—Å—ñ: {e}")
        return f"OpenAI Assistant-–ø–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã: {e}", thread_id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú”ô—Ç—ñ–Ω–¥—ñ–∫ —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É"""
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    user_query = update.message.text.strip()
    
    waiting_message = await update.message.reply_text("‚è≥ –ñ–∞—É–∞–ø –¥–∞–π—ã–Ω–¥–∞–ª—É–¥–∞...")

    thread_id = context.user_data.get('thread_id')
    response_text, new_thread_id = await run_openai_assistant(user_query, thread_id)
    context.user_data['thread_id'] = new_thread_id
    
    await waiting_message.edit_text(response_text, reply_markup=reply_markup)
    
    context.user_data[f'last_question_{waiting_message.message_id}'] = user_query
    context.user_data[f'last_answer_{waiting_message.message_id}'] = response_text


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—É—Ä–µ—Ç—Ç—ñ —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É (–ì–∏–±—Ä–∏–¥—Ç—ñ –º–æ–¥–µ–ª—å)"""
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    waiting_message = await update.message.reply_text("‚è≥ –°—É—Ä–µ—Ç —Ç–∞–ª–¥–∞–Ω—ã–ø –∂–∞—Ç—ã—Ä...")
    
    try:
        # 1-–∫–µ–∑–µ“£: –°—É—Ä–µ—Ç—Ç—ñ Claude-“õ–∞ –∂—ñ–±–µ—Ä—ñ–ø, —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –∞–ª—É
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_data = base64.b64encode(photo_bytes).decode('utf-8')
        
        claude_prompt = (
            "–°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ - —Å—É—Ä–µ—Ç—Ç–µ–Ω —Ç–µ–∫ “õ–∞–Ω–∞ '–•–∞–ª–∞–ª –î–∞–º—É' –¥–µ—Ä–µ–∫“õ–æ—Ä—ã–Ω–∞–Ω —ñ–∑–¥–µ—É–≥–µ –±–æ–ª–∞—Ç—ã–Ω –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –∞–Ω—ã“õ—Ç–∞—É. –ñ–∞–ª–ø—ã —Å–∏–ø–∞—Ç—Ç–∞–º–∞ “õ–∞–∂–µ—Ç –µ–º–µ—Å.\n\n"
            "–ë–∞—Å—Ç—ã –Ω–∞–∑–∞—Ä–¥—ã –º—ã–Ω–∞–ª–∞—Ä“ì–∞ –∞—É–¥–∞—Ä:\n"
            "1. ”®–Ω—ñ–º–Ω—ñ“£ –Ω–µ–º–µ—Å–µ –±—Ä–µ–Ω–¥—Ç—ñ“£ –∞—Ç–∞—É—ã.\n"
            "2. –¢–∞—É–∞—Ä–¥—ã“£ –∞—Ç—ã–Ω —Ç–∞–±—É“ì–∞ —Ç—ã—Ä—ã—Å, —Ç–∞—É–∞—Ä –∞—Ç—ã–Ω –æ–Ω—ã“£ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–º–µ–Ω –Ω–µ–º–µ—Å–µ ”©–Ω—ñ–º–Ω—ñ“£ “±—Ä–∞–Ω —Å”©–∑–¥–µ—Ä—ñ–º–µ–Ω —à–∞—Ç–∞—Å—Ç—ã—Ä—ã–ø –∞–ª–º–∞!\n"
            "3. –ú–µ–∫–µ–º–µ–Ω—ñ“£ –∞—Ç–∞—É—ã (–º—ã—Å–∞–ª—ã, –¥“Ø–∫–µ–Ω–Ω—ñ“£, –¥”ô–º—Ö–∞–Ω–∞–Ω—ã“£ –º–∞“£–¥–∞–π—à–∞—Å—ã–Ω–¥–∞“ì—ã –∂–∞–∑—É).\n"
            "4. ”®–Ω—ñ–º “õ“±—Ä–∞–º—ã–Ω–¥–∞“ì—ã –ï-“õ–æ—Å–ø–∞–ª–∞—Ä–¥—ã“£ –∫–æ–¥—Ç–∞—Ä—ã (–º—ã—Å–∞–ª—ã, '–ï120', '–ï471').\n\n"
            "5. ”®–Ω–¥—ñ—Ä—É—à—ñ–Ω—ñ“£ –∞—Ç–∞—É—ã–Ω –¥–∞ –∞—ã“õ—Ç–∞—É“ì–∞ —Ç—ã—Ä—ã—Å. –ï–≥–µ—Ä –æ–ª —Å—É—Ä–µ—Ç—Ç–µ –∫”©—Ä—ñ–Ω—Å–µ, –æ–Ω—ã –¥–∞ –∂–∞–∑.\n\n"
            "–¢–µ–∫ –æ—Å—ã —Ç–∞–±—ã–ª“ì–∞–Ω –Ω–∞“õ—Ç—ã –∞—Ç–∞—É–ª–∞—Ä–¥—ã –Ω–µ–º–µ—Å–µ –∫–æ–¥—Ç–∞—Ä–¥—ã —Ç—ñ–∑—ñ–º —Ä–µ—Ç—ñ–Ω–¥–µ, ”ô—Ä“õ–∞–π—Å—ã—Å—ã–Ω –∂–∞“£–∞ –∂–æ–ª–¥–∞–Ω –∂–∞–∑—ã–ø –±–µ—Ä. "
            "–ï–≥–µ—Ä —Å—É—Ä–µ—Ç—Ç–µ–Ω –æ—Å—ã–Ω–¥–∞–π –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞—Å–∞, '–ú–∞“£—ã–∑–¥—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã' –¥–µ–ø –∂–∞—É–∞–ø –±–µ—Ä."
            "–ñ—ñ–±–µ—Ä–º–µ—Å –±“±—Ä—ã–Ω –±–∞—Ä–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã “õ–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä."
        )
        
        claude_response = client_claude.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=500,
            messages=[{"role": "user", "content": [
                {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_data}},
                {"type": "text", "text": claude_prompt}
            ]}]
        )
        image_description = claude_response.content[0].text
        
        # --- –ñ–ê“¢–ê–†–¢–´–õ“í–ê–ù OPENAI PROMPT ---
        # –ï–Ω–¥—ñ OpenAI-“ì–∞ –±“±–π—Ä—ã“õ –µ–º–µ—Å, –∞“õ—ã–ª–¥—ã —Ç–∞–ø—Å—ã—Ä–º–∞ –±–µ—Ä–µ–º—ñ–∑
        final_query_to_openai = (
            f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º–∞“ì–∞–Ω ”©–Ω—ñ–º–Ω—ñ“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä–¥—ñ. –ú–µ–Ω—ñ“£ –∫”©–º–µ–∫—à—ñ–º (Claude) —Å—É—Ä–µ—Ç—Ç—ñ —Ç–∞–ª–¥–∞–ø, –æ–¥–∞–Ω –º—ã–Ω–∞–¥–∞–π –∫—ñ–ª—Ç —Å”©–∑–¥–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞–¥—ã: '{image_description}'.\n\n"
            f"–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä: –±“±–ª –∫”©–º–µ–∫—à—ñ–Ω—ñ“£ —Ç–∞–ª–¥–∞—É—ã–Ω–¥–∞ “õ–∞—Ç–µ–ª—ñ–∫—Ç–µ—Ä –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω (–º—ã—Å–∞–ª—ã, ”ô—Ä—ñ–ø “õ–∞—Ç–µ—Å—ñ –Ω–µ–º–µ—Å–µ –¥“±—Ä—ã—Å —Ç–∞–Ω—ã–ª–º–∞“ì–∞–Ω —Å”©–∑). \n\n"
            f"–°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ ‚Äì –æ—Å—ã –∫—ñ–ª—Ç —Å”©–∑–¥–µ—Ä–¥—ñ –Ω–µ–≥—ñ–∑–≥–µ –∞–ª–∞ –æ—Ç—ã—Ä—ã–ø, ”©–∑—ñ“£–Ω—ñ“£ –±—ñ–ª—ñ–º “õ–æ—Ä—ã“£–Ω–∞–Ω (–∂“Ø–∫—Ç–µ–ª–≥–µ–Ω —Ñ–∞–π–ª–¥–∞—Ä–¥–∞–Ω) –æ—Å—ã —Å”©–∑–¥–µ—Ä–¥—ñ“£ ”ô—Ä“õ–∞–π—Å—ã—Å—ã–Ω –±–∞–∑–∞“£–Ω–∞–Ω —ñ–∑–¥–µ–ø –∫”©—Ä. –º–µ–∫–µ–º–µ–ª–µ—Ä–¥—ñ –Ω–µ–º–µ—Å–µ “õ–æ—Å–ø–∞–ª–∞—Ä–¥—ã –∂–∞–Ω-–∂–∞“õ—Ç—ã —ñ–∑–¥–µ! "
            f"–¢–∞–±—ã–ª“ì–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞  —Ç–æ–ª—ã“õ –∂–∞—É–∞–ø –±–µ—Ä."
        )
        # ------------------------------------
        
        await waiting_message.edit_text("‚è≥ –ê“õ–ø–∞—Ä–∞—Ç—Ç—ã —ñ–∑–¥–µ—É–¥–µ–º—ñ–Ω...")
        thread_id = context.user_data.get('thread_id')
        openai_response, new_thread_id = await run_openai_assistant(final_query_to_openai, thread_id)
        context.user_data['thread_id'] = new_thread_id

        await waiting_message.edit_text(openai_response, reply_markup=reply_markup)
        context.user_data[f'last_question_{waiting_message.message_id}'] = f"Image Query: {image_description}"
        context.user_data[f'last_answer_{waiting_message.message_id}'] = openai_response
    except Exception as e:
        print(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        await waiting_message.edit_text(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üëç/üëé –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã–Ω–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ–¥—ñ –∂”ô–Ω–µ –Ω”ô—Ç–∏–∂–µ–Ω—ñ CSV —Ñ–∞–π–ª—ã–Ω–∞ —Å–∞“õ—Ç–∞–π–¥—ã"""
    query = update.callback_query
    await query.answer("–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç!")
    
    await query.edit_message_reply_markup(reply_markup=None)
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_id = query.from_user.id
    vote = query.data
    
    message_id = query.message.message_id
    question = context.user_data.get(f'last_question_{message_id}', '–°“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã')
    bot_answer = context.user_data.get(f'last_answer_{message_id}', '–ñ–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã')

    file_exists = os.path.isfile('feedback.csv')
    with open('feedback.csv', 'a', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['timestamp', 'user_id', 'question', 'bot_answer', 'vote']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        if not file_exists:
            writer.writeheader()
        
        writer.writerow({
            'timestamp': timestamp,
            'user_id': user_id,
            'question': question,
            'bot_answer': bot_answer,
            'vote': vote
        })
    
    print(f"–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å 'feedback.csv' —Ñ–∞–π–ª—ã–Ω–∞ —Å–∞“õ—Ç–∞–ª–¥—ã: User {user_id} '{vote}' –¥–µ–ø –±–∞—Å—Ç—ã.")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(button_callback))
    
    print("üöÄ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã... OpenAI Assistants API –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥–µ (–¥–∏–∞–ª–æ–≥—Ç—ã –µ—Å—Ç–µ —Å–∞“õ—Ç–∞—É–º–µ–Ω).")
    app.run_polling()

if __name__ == '__main__':
    main()