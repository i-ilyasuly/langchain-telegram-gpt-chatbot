# main.py

import os
import asyncio
import re
import random
import csv
from datetime import datetime
import logging
import json 
from dotenv import load_dotenv
import pandas as pd
from contextlib import asynccontextmanager

# --- –ñ–∞“£–∞ –¥–µ—Ä–µ–∫“õ–æ—Ä —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã–Ω –∏–º–ø–æ—Ä—Ç—Ç–∞—É ---
from database import add_or_update_user, get_user_count

# --- –ù–µ–≥—ñ–∑–≥—ñ –±–∞–ø—Ç–∞—É–ª–∞—Ä ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- API –∫—ñ–ª—Ç—Ç–µ—Ä–¥—ñ –∂”ô–Ω–µ –±–∞–ø—Ç–∞—É–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
VECTOR_STORE_ID = os.getenv('VECTOR_STORE_ID')

import uvicorn
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.error import RetryAfter
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, 
    CallbackQueryHandler, ConversationHandler,
)
import openai
from openai import AsyncOpenAI
from google.cloud import vision

# --- –ö”©–ø—Ç—ñ–ª–¥—ñ–ª—ñ–∫—Ç—ñ –±–∞—Å“õ–∞—Ä—É ---
translations = {}
def load_translations():
    global translations
    try:
        with open('locales.json', 'r', encoding='utf-8') as f:
            translations = json.load(f)
        logger.info("–ê—É–¥–∞—Ä–º–∞–ª–∞—Ä —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ.")
    except FileNotFoundError:
        logger.error("–ê—É–¥–∞—Ä–º–∞ —Ñ–∞–π–ª—ã (locales.json) —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        translations = {}
    except json.JSONDecodeError:
        logger.error("locales.json —Ñ–∞–π–ª—ã–Ω—ã“£ —Ñ–æ—Ä–º–∞—Ç—ã –¥“±—Ä—ã—Å –µ–º–µ—Å.")
        translations = {}
load_translations()

def get_text(key, lang_code='kk'):
    lang = 'ru' if lang_code == 'ru' else 'kk'
    return translations.get(lang, {}).get(key, translations.get('kk', {}).get(key, f"<{key}>"))

def get_language_instruction(lang_code='kk'):
    if lang_code == 'ru':
        return "–ú–∞“£—ã–∑–¥—ã –µ—Ä–µ–∂–µ: –∂–∞—É–∞–±—ã“£–¥—ã –æ—Ä—ã—Å —Ç—ñ–ª—ñ–Ω–¥–µ “õ–∞–π—Ç–∞—Ä. "
    return "–ú–∞“£—ã–∑–¥—ã –µ—Ä–µ–∂–µ: –∂–∞—É–∞–±—ã“£–¥—ã “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ “õ–∞–π—Ç–∞—Ä. "

# --- –¢“±—Ä–∞“õ—Ç—ã–ª–∞—Ä ---
DATA_DIR = os.getenv("RENDER_DISK_MOUNT_PATH", ".")
ADMIN_USER_IDS = [929307596]
SUSPICIOUS_LOG_FILE = os.path.join(DATA_DIR, "suspicious_products.csv")
FEEDBACK_FILE = os.path.join(DATA_DIR, "feedback.csv")
BROADCAST_MESSAGE = range(1)
WAITING_FOR_UPDATE_FILE = range(2)
WAITING_MESSAGES = [
    "‚è≥ –¢–∞–ª–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", "ü§î –Ü–∑–¥–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", "üîé –ê–∑ “õ–∞–ª–¥—ã...",
    "‚úçÔ∏è –ñ–∞—É–∞–ø—Ç—ã –¥–∞–π—ã–Ω–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...", "‚ú® –ú—ñ–Ω–µ-–º—ñ–Ω–µ, –¥–∞–π—ã–Ω –±–æ–ª–∞–¥—ã..."
]

# --- API –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä—ñ ---
client_openai = AsyncOpenAI(api_key=OPENAI_API_KEY)
client_vision = vision.ImageAnnotatorClient()

# --- –ë–û–¢ –§–£–ù–ö–¶–ò–Ø–õ–ê–†–´ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_or_update_user(user.id, user.full_name, user.username, user.language_code)
    context.user_data.pop('thread_id', None)
    lang_code = user.language_code
    keyboard = [
        [InlineKeyboardButton(get_text('ask_text_button', lang_code), callback_data='ask_text')],
        [InlineKeyboardButton(get_text('ask_photo_button', lang_code), callback_data='ask_photo')],
    ]
    if user.id in ADMIN_USER_IDS:
        keyboard.append([InlineKeyboardButton(get_text('admin_panel_button', lang_code), callback_data='admin_panel')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = get_text('welcome_message', lang_code)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def broadcast_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in ADMIN_USER_IDS:
        await query.message.reply_text("–ë–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ—Ç—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ –º”ô—Ç—ñ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return BROADCAST_MESSAGE
    return ConversationHandler.END

async def broadcast_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if admin_id not in ADMIN_USER_IDS:
        return ConversationHandler.END
    message_text = update.message.text
    await update.message.reply_text(f"'{message_text}' —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã –±–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ...")
    user_ids = set()
    if os.path.exists(USER_IDS_FILE):
        with open(USER_IDS_FILE, 'r', newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader, None)
            user_ids = {int(row[0]) for row in reader if row}
    sent_count = 0
    failed_count = 0
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            failed_count += 1
            logger.error(f"ID {user_id} “õ–æ–ª–¥–∞–Ω—É—à—ã—Å—ã–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã: {e}")
    await update.message.reply_text(f"üì¨ –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∞—Ä–∞—Ç—É –∞—è“õ—Ç–∞–ª–¥—ã!\n\n‚úÖ –ñ–µ—Ç–∫—ñ–∑—ñ–ª–¥—ñ: {sent_count}\n‚ùå –ñ–µ—Ç–∫—ñ–∑—ñ–ª–º–µ–¥—ñ: {failed_count}")
    return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def feedback_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        user_count = get_user_count()
        feedback_count = 0
        likes = 0
        dislikes = 0
        if os.path.exists(FEEDBACK_FILE):
            df = pd.read_csv(FEEDBACK_FILE)
            feedback_count = len(df)
            if 'vote' in df.columns:
                likes = df['vote'].value_counts().get('like', 0)
                dislikes = df['vote'].value_counts().get('dislike', 0)
        stats_text = (
            f"üìä **–ë–æ—Ç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã**\n\n"
            f"üë• **–ñ–∞–ª–ø—ã “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä:** {user_count}\n"
            f"üìù **–ë–∞—Ä–ª—ã“õ –ø—ñ–∫—ñ—Ä–ª–µ—Ä:** {feedback_count}\n"
            f"üëç **–õ–∞–π–∫—Ç–∞—Ä:** {likes}\n"
            f"üëé **–î–∏–∑–ª–∞–π–∫—Ç–∞—Ä:** {dislikes}"
        )
        await query.message.reply_text(stats_text, parse_mode='Markdown')
    except Exception as e:
        await query.message.reply_text(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã: {e}")

async def suspicious_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        if not os.path.exists(SUSPICIOUS_LOG_FILE) or os.path.getsize(SUSPICIOUS_LOG_FILE) == 0:
            await query.message.reply_text("‚ÑπÔ∏è –ö“Ø–¥—ñ–∫—Ç—ñ ”©–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ –±–æ—Å.")
            return
        df = pd.read_csv(SUSPICIOUS_LOG_FILE)
        if df.empty:
            await query.message.reply_text("‚ÑπÔ∏è –ö“Ø–¥—ñ–∫—Ç—ñ ”©–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ –±–æ—Å.")
            return
        last_5_suspicious = df.tail(5)
        await query.message.reply_text(f"üßê **–°–æ“£“ì—ã {len(last_5_suspicious)} –∫“Ø–¥—ñ–∫—Ç—ñ ”©–Ω—ñ–º:**")
        for index, row in last_5_suspicious.iterrows():
            timestamp = row.get('timestamp', '–ë–µ–ª–≥—ñ—Å—ñ–∑')
            user_id = row.get('user_id', '–ë–µ–ª–≥—ñ—Å—ñ–∑')
            description = row.get('claude_description', '–°–∏–ø–∞—Ç—Ç–∞–º–∞ –∂–æ“õ')
            caption = (
                f"üóì **–£–∞“õ—ã—Ç—ã:** `{timestamp}`\n"
                f"üë§ **“ö–æ–ª–¥–∞–Ω—É—à—ã ID:** `{user_id}`\n"
                f"üìù **–°–∏–ø–∞—Ç—Ç–∞–º–∞:**\n{description}"
            )
            await query.message.reply_text(caption, parse_mode='Markdown')
            await asyncio.sleep(0.5)
    except FileNotFoundError:
        await query.message.reply_text(f"‚ö†Ô∏è `{SUSPICIOUS_LOG_FILE}` —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ö“Ø–¥—ñ–∫—Ç—ñ —Ç—ñ–∑—ñ–º–¥—ñ –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã: {e}")

async def feedback_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç!")
    await query.edit_message_reply_markup(reply_markup=None)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_id = query.from_user.id
    vote = query.data
    message_id = query.message.message_id
    question = context.user_data.get(f'last_question_{message_id}', '–°“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã')
    bot_answer = context.user_data.get(f'last_answer_{message_id}', '–ñ–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã')
    file_exists = os.path.isfile(FEEDBACK_FILE)
    with open(FEEDBACK_FILE, 'a', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['timestamp', 'user_id', 'question', 'bot_answer', 'vote']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists: writer.writeheader()
        writer.writerow({'timestamp': timestamp, 'user_id': user_id, 'question': question, 'bot_answer': bot_answer, 'vote': vote})
    logger.info(f"–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å '{FEEDBACK_FILE}' —Ñ–∞–π–ª—ã–Ω–∞ —Å–∞“õ—Ç–∞–ª–¥—ã: User {user_id} '{vote}' –¥–µ–ø –±–∞—Å—Ç—ã.")

async def update_db_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in ADMIN_USER_IDS:
        await query.message.reply_text(
            "–ë—ñ–ª—ñ–º “õ–æ—Ä—ã–Ω –∂–∞“£–∞—Ä—Ç—É “Ø—à—ñ–Ω .txt, .csv, .md –Ω–µ–º–µ—Å–µ .pdf —Ñ–∞–π–ª—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.\n"
            "–¢–æ“õ—Ç–∞—Ç—É “Ø—à—ñ–Ω /cancel –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑."
        )
        return WAITING_FOR_UPDATE_FILE
    else:
        await query.message.reply_text("–ë“±–ª –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ —Ç–µ–∫ –∞–¥–º–∏–Ω–¥–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")
        return ConversationHandler.END

async def update_db_receive_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    document = message.document
    user_id = message.from_user.id
    if user_id not in ADMIN_USER_IDS:
        return ConversationHandler.END
    if not VECTOR_STORE_ID:
        await message.reply_text("‚ùå “ö–∞—Ç–µ: VECTOR_STORE_ID .env —Ñ–∞–π–ª—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω!")
        return ConversationHandler.END
    waiting_message = await message.reply_text("‚è≥ –§–∞–π–ª–¥—ã “õ–∞–±—ã–ª–¥–∞–¥—ã–º, OpenAI-“ì–∞ –∂“Ø–∫—Ç–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...")
    try:
        file = await document.get_file()
        file_content = await file.download_as_bytearray()
        openai_file = await client_openai.files.create(
            file=(document.file_name, file_content),
            purpose="assistants"
        )
        await waiting_message.edit_text(f"‚úÖ –§–∞–π–ª OpenAI-“ì–∞ —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ (ID: {openai_file.id}).\n"
                                      f"–ï–Ω–¥—ñ –±—ñ–ª—ñ–º “õ–æ—Ä—ã–Ω–∞ (Vector Store) “õ–æ—Å—ã–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...")
        vector_store_file = await client_openai.beta.vector_stores.files.create(
            vector_store_id=VECTOR_STORE_ID,
            file_id=openai_file.id
        )
        await waiting_message.edit_text(f"üéâ –¢–∞–º–∞—à–∞! '{document.file_name}' —Ñ–∞–π–ª—ã –±—ñ–ª—ñ–º “õ–æ—Ä—ã–Ω–∞ —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã.")
    except Exception as e:
        logger.error(f"–ë–∞–∑–∞–Ω—ã –∂–∞“£–∞—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        await waiting_message.edit_text(f"‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã: {e}")
    return ConversationHandler.END

async def update_db_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ë–∞–∑–∞–Ω—ã –∂–∞“£–∞—Ä—Ç—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.")
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    lang_code = user.language_code
    if query.data in ['ask_text', 'ask_photo', 'admin_panel']:
        await query.answer()
    if query.data == 'ask_text':
        await query.message.reply_text(get_text('ask_text_prompt', lang_code))
    elif query.data == 'ask_photo':
        await query.message.reply_text(get_text('ask_photo_prompt', lang_code))
    elif query.data == 'admin_panel':
        if user_id in ADMIN_USER_IDS:
            admin_keyboard = [
                [InlineKeyboardButton(get_text('stats_button', lang_code), callback_data='feedback_stats')],
                [InlineKeyboardButton(get_text('suspicious_list_button', lang_code), callback_data='suspicious_list')],
                [InlineKeyboardButton(get_text('broadcast_button', lang_code), callback_data='broadcast_start')],
                [InlineKeyboardButton(get_text('update_db_button', lang_code), callback_data='update_db_placeholder')]
            ]
            reply_markup = InlineKeyboardMarkup(admin_keyboard)
            await query.message.reply_text(get_text('admin_panel_title', lang_code), reply_markup=reply_markup)
    elif query.data == 'feedback_stats':
        if user_id in ADMIN_USER_IDS:
            await feedback_stats(update, context)
    elif query.data == 'suspicious_list':
        if user_id in ADMIN_USER_IDS:
            await suspicious_list(update, context)
    elif query.data in ['like', 'dislike']:
        await feedback_button_callback(update, context)

async def run_openai_assistant(user_query: str, thread_id: str | None) -> tuple[str, str, object]:
    if not OPENAI_ASSISTANT_ID: 
        return "“ö–∞—Ç–µ: OPENAI_ASSISTANT_ID .env —Ñ–∞–π–ª—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω.", thread_id, None
    try:
        if thread_id is None:
            run = await client_openai.beta.threads.create_and_run(
                assistant_id=OPENAI_ASSISTANT_ID,
                thread={"messages": [{"role": "user", "content": user_query}]}
            )
            thread_id = run.thread_id
        else:
            await client_openai.beta.threads.messages.create(thread_id=thread_id, role="user", content=user_query)
            run = await client_openai.beta.threads.runs.create(thread_id=thread_id, assistant_id=OPENAI_ASSISTANT_ID)
        return "", thread_id, run
    except openai.APIError as e:
        logger.error(f"OpenAI API “õ–∞—Ç–µ—Å—ñ: {e}")
        return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, OpenAI —Å–µ—Ä–≤–∏—Å—ñ–Ω–¥–µ —É–∞“õ—ã—Ç—à–∞ –∞“õ–∞—É –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –°”ô–ª–¥–µ–Ω —Å–æ“£ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.", thread_id, None
    except openai.RateLimitError as e:
        logger.error(f"OpenAI Rate Limit “õ–∞—Ç–µ—Å—ñ: {e}")
        return "–°“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä –ª–∏–º–∏—Ç—ñ–Ω–µ–Ω –∞—Å—ã–ø –∫–µ—Ç—Ç—ñ. –ë—ñ—Ä–∞–∑ —É–∞“õ—ã—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.", thread_id, None
    except Exception as e:
        logger.error(f"OpenAI Assistant-—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É –∫–µ–∑—ñ–Ω–¥–µ –±–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ: {e}")
        return "–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", thread_id, None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang_code = user.language_code
    user_query_original = update.message.text.strip()
    logger.info(f"User {user.id} ({user.full_name}) sent a text message: '{user_query_original}'")
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    language_instruction = get_language_instruction(lang_code)
    user_query_for_ai = language_instruction + user_query_original
    waiting_message = await update.message.reply_text(random.choice(WAITING_MESSAGES))
    try:
        thread_id = context.user_data.get('thread_id')
        response_text, new_thread_id, run = await run_openai_assistant(user_query_for_ai, thread_id)
        if run is None:
             await waiting_message.edit_text(response_text)
             return
        context.user_data['thread_id'] = new_thread_id
        last_message_text = ""
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            current_message_text = random.choice(WAITING_MESSAGES)
            if current_message_text != last_message_text:
                try:
                    await waiting_message.edit_text(current_message_text)
                    last_message_text = current_message_text
                except Exception: pass
            run = await client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
        if run.status == 'completed':
            messages = await client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            logger.info(f"Bot response for user {user.id}: '{cleaned_response[:100]}...'")
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup)
            context.user_data[f'last_question_{waiting_message.message_id}'] = user_query_original
            context.user_data[f'last_answer_{waiting_message.message_id}'] = cleaned_response
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            logger.error(f"OpenAI run failed for user {user.id}. Status: {run.status}, Error: {error_message}")
            await waiting_message.edit_text(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {error_message}")
    except Exception as e:
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ (User ID: {user.id}): {e}")
        await waiting_message.edit_text("–ñ–∞—É–∞–ø –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang_code = user.language_code
    logger.info(f"User {user.id} ({user.full_name}) sent a photo.")
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    waiting_message = await update.message.reply_text("‚è≥ –°—É—Ä–µ—Ç—Ç—ñ “õ–∞–±—ã–ª–¥–∞–¥—ã–º, —Ç–∞–ª–¥–∞—É–¥—ã –±–∞—Å—Ç–∞–π–º—ã–Ω...")
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image = vision.Image(content=bytes(photo_bytes))
        response = client_vision.text_detection(image=image)
        if response.error.message:
            raise Exception(f"Google Vision API “õ–∞—Ç–µ—Å—ñ: {response.error.message}")
        texts = response.text_annotations
        image_description = texts[0].description.replace('\n', ' ') if texts else "–°—É—Ä–µ—Ç—Ç–µ–Ω –º”ô—Ç—ñ–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã."
        logger.info(f"OCR result for user {user.id}: '{image_description[:100]}...'")
        await waiting_message.edit_text("‚úÖ –°—É—Ä–µ—Ç —Ç–∞–ª–¥–∞–Ω–¥—ã! –ï–Ω–¥—ñ OpenAI –∞—Ä“õ—ã–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —ñ–∑–¥–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...")
        language_instruction = get_language_instruction(lang_code)
        final_query_to_openai = (
            f"{language_instruction}"
            f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º–∞“ì–∞–Ω —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä–¥—ñ. Google Vision —Å—É—Ä–µ—Ç—Ç–µ–Ω –º—ã–Ω–∞–¥–∞–π –º”ô—Ç—ñ–Ω–¥—ñ –æ“õ—ã–¥—ã: '{image_description}'.\n\n"
            f"–û—Å—ã –º”ô—Ç—ñ–Ω–¥–µ–≥—ñ –Ω–µ–≥—ñ–∑–≥—ñ –∞—Ç–∞—É–ª–∞—Ä–¥—ã (”©–Ω—ñ–º, –±—Ä–µ–Ω–¥, –º–µ–∫–µ–º–µ) –∞–Ω—ã“õ—Ç–∞–ø, "
            f"—Å–æ–ª –±–æ–π—ã–Ω—à–∞ ”©–∑—ñ“£–Ω—ñ“£ –±—ñ–ª—ñ–º “õ–æ—Ä—ã“£–Ω–∞–Ω (—Ñ–∞–π–ª–¥–∞—Ä–¥–∞–Ω) –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã —ñ–∑–¥–µ. –¢–∞–±—ã–ª“ì–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ, "
            f"—Å—É—Ä–µ—Ç—Ç–µ–≥—ñ ”©–Ω—ñ–º–Ω—ñ“£ —Ö–∞–ª–∞–ª —Å—Ç–∞—Ç—É—Å—ã —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“õ –∂–∞—É–∞–ø –±–µ—Ä. "
            f"–ú–∞“£—ã–∑–¥—ã! –ú–µ–Ω —Å–∞“ì–∞–Ω –∂–∞–ª“ì–∞–Ω —Ö–∞–ª–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—Ç–∞—Ä–¥—ã –¥–∞ –∂—ñ–±–µ—Ä—ñ–ø –∂–∞—Ç“õ–∞–Ω –±–æ–ª—É—ã–º –º“Ø–º–∫—ñ–Ω, —Å–æ–Ω–¥—ã“õ—Ç–∞–Ω –º–µ–Ω—ñ“£ —Ö–∞–ª–∞–ª, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–∞—Ä, —Ç.—Å.—Å. —Å”©–∑–¥–µ—Ä—ñ–º–µ —Å–µ–Ω–±–µ–π ”©–∑ –±–∞–∑–∞“£–Ω–∞–Ω —ñ–∑–¥–µ! \n\n"
        )
        thread_id = context.user_data.get('thread_id')
        response_text, new_thread_id, run = await run_openai_assistant(final_query_to_openai, thread_id)
        if run is None:
            await waiting_message.edit_text(response_text)
            return
        context.user_data['thread_id'] = new_thread_id
        last_message_text = ""
        while run.status in ['in_progress', 'queued']:
            await asyncio.sleep(2)
            current_message_text = random.choice(WAITING_MESSAGES)
            if current_message_text != last_message_text:
                try:
                    await waiting_message.edit_text(current_message_text)
                    last_message_text = current_message_text
                except Exception: pass
            run = await client_openai.beta.threads.runs.retrieve(thread_id=new_thread_id, run_id=run.id)
        if run.status == 'completed':
            messages = await client_openai.beta.threads.messages.list(thread_id=new_thread_id, limit=1)
            final_response = messages.data[0].content[0].text.value
            cleaned_response = re.sub(r'„Äê.*?‚Ä†source„Äë', '', final_response).strip()
            logger.info(f"Bot response for user {user.id} (photo): '{cleaned_response[:100]}...'")
            await waiting_message.edit_text(cleaned_response, reply_markup=reply_markup)
            context.user_data[f'last_question_{waiting_message.message_id}'] = f"Image Query: {image_description}"
            context.user_data[f'last_answer_{waiting_message.message_id}'] = cleaned_response
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            logger.error(f"OpenAI run failed for user {user.id} (photo). Status: {run.status}, Error: {error_message}")
            await waiting_message.edit_text(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {error_message}")
    except Exception as e:
        logger.error(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ (User ID: {user.id}): {e}")
        await waiting_message.edit_text("–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É ---
application = Application.builder().token(TELEGRAM_TOKEN).build()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –°–µ—Ä–≤–µ—Ä —ñ—Å–∫–µ “õ–æ—Å—ã–ª“ì–∞–Ω–¥–∞ –æ—Ä—ã–Ω–¥–∞–ª–∞—Ç—ã–Ω –∫–æ–¥
    broadcast_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(broadcast_start_handler, pattern='^broadcast_start$')],
        states={BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message_handler)]},
        fallbacks=[CommandHandler('cancel', cancel_broadcast)], per_user=True,
    )
    update_db_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(update_db_start, pattern='^update_db_placeholder$')],
        states={WAITING_FOR_UPDATE_FILE: [MessageHandler(filters.Document.ALL, update_db_receive_file)]},
        fallbacks=[CommandHandler('cancel', update_db_cancel)], per_user=True,
    )
    application.add_handler(broadcast_conv_handler)
    application.add_handler(update_db_conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    await application.initialize()
    if WEBHOOK_URL and WEBHOOK_URL.startswith("https://"):
        try:
            await application.bot.set_webhook(url=f"{WEBHOOK_URL}/telegram", allowed_updates=Update.ALL_TYPES)
            logger.info(f"üöÄ –ë–æ—Ç Webhook —Ä–µ–∂–∏–º—ñ–Ω–¥–µ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã: {WEBHOOK_URL}")
        except RetryAfter as e:
            logger.warning(f"Webhook –æ—Ä–Ω–∞—Ç—É –∫–µ–∑—ñ–Ω–¥–µ Flood control “õ–∞—Ç–µ—Å—ñ: {e}.")
        except Exception as e:
            logger.error(f"Webhook –æ—Ä–Ω–∞—Ç—É –∫–µ–∑—ñ–Ω–¥–µ –±–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ: {e}")
    else:
        logger.warning("‚ÑπÔ∏è WEBHOOK_URL –∂–∞—Ä–∞–º—Å—ã–∑, –±–æ—Ç Webhook-—Å—ã–∑ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã.")
        await application.bot.delete_webhook()
    
    yield
    
    # –°–µ—Ä–≤–µ—Ä —Ç–æ“õ—Ç–∞“ì–∞–Ω–¥–∞ –æ—Ä—ã–Ω–¥–∞–ª–∞—Ç—ã–Ω –∫–æ–¥
    await application.shutdown()
    logger.info("üîö –ë–æ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.")

app_fastapi = FastAPI(lifespan=lifespan)

@app_fastapi.post("/telegram")
async def telegram_webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    await application.process_update(update)
    return {"status": "ok"}

@app_fastapi.get("/")
def index():
    return {"message": "Telegram Bot webhook —Ä–µ–∂–∏–º—ñ–Ω–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä."}

if __name__ == '__main__':
    logger.info("–°–µ—Ä–≤–µ—Ä–¥—ñ —ñ—Å–∫–µ “õ–æ—Å—É “Ø—à—ñ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–¥–∞ –∫–µ–ª–µ—Å—ñ –∫–æ–º–∞–Ω–¥–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞“£—ã–∑:")
    logger.info("python3 -m uvicorn main:app_fastapi --reload")