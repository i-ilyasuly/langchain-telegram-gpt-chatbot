import os
import time
import base64
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from anthropic import Anthropic
from openai import OpenAI
from dotenv import load_dotenv

# --- API –∫—ñ–ª—Ç—Ç–µ—Ä–¥—ñ –∂”ô–Ω–µ –±–∞–ø—Ç–∞—É–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')

# API –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä—ñ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
client_claude = Anthropic(api_key=CLAUDE_API_KEY)
client_openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Telegram –ë–æ—Ç—Ç—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ –ª–æ–≥–∏–∫–∞—Å—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°”ô–ª–µ–º! –•–∞–ª–∞–ª –º–µ–∫–µ–º–µ/“õ–æ—Å–ø–∞ —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ ”©–Ω—ñ–º–Ω—ñ“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")

async def run_openai_assistant(user_query: str) -> str:
    """OpenAI Assistant-—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—ã–ø, –∂–∞—É–∞–ø—Ç—ã –∞–ª–∞—Ç—ã–Ω —Ñ—É–Ω–∫—Ü–∏—è (–ï“¢ –ñ–ê“¢–ê –°–ò–ù–¢–ê–ö–°–ò–°)"""
    if not OPENAI_ASSISTANT_ID:
        return "“ö–∞—Ç–µ: OPENAI_ASSISTANT_ID .env —Ñ–∞–π–ª—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω."
        
    try:
        # 1. –ñ–∞“£–∞ "Thread" (–¥–∏–∞–ª–æ–≥ –∂–µ–ª—ñ—Å—ñ) “õ“±—Ä—ã–ø, –æ“ì–∞–Ω –±—ñ—Ä–¥–µ–Ω —Å“±—Ä–∞“õ—Ç—ã “õ–æ—Å—ã–ø, —ñ—Å–∫–µ “õ–æ—Å—É
        run = client_openai.beta.threads.create_and_run(
            assistant_id=OPENAI_ASSISTANT_ID,
            thread={
                "messages": [
                    {"role": "user", "content": user_query}
                ]
            }
        )

        # 2. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—Ç—ñ“£ –∂–∞—É–∞–±—ã–Ω –∫“Ø—Ç—É
        while run.status != "completed":
            time.sleep(0.5)
            run = client_openai.beta.threads.runs.retrieve(thread_id=run.thread_id, run_id=run.id)
            if run.status in ["failed", "cancelled", "expired"]:
                error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
                print(f"Run —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã: {error_message}")
                return f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {error_message}"

        # 3. –ñ–∞—É–∞–ø—Ç—ã –∞–ª—É
        messages = client_openai.beta.threads.messages.list(thread_id=run.thread_id)
        assistant_response = messages.data[0].content[0].text.value
        return assistant_response

    except Exception as e:
        print(f"OpenAI Assistant “õ–∞—Ç–µ—Å—ñ: {e}")
        return f"OpenAI Assistant-–ø–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã: {e}"


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú”ô—Ç—ñ–Ω–¥—ñ–∫ —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É"""
    user_query = update.message.text.strip()
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    response_text = await run_openai_assistant(user_query)
    await update.message.reply_text(response_text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—É—Ä–µ—Ç—Ç—ñ —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É (–ì–∏–±—Ä–∏–¥—Ç—ñ –º–æ–¥–µ–ª—å)"""
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # 1-–∫–µ–∑–µ“£: –°—É—Ä–µ—Ç—Ç—ñ Claude-“õ–∞ –∂—ñ–±–µ—Ä—ñ–ø, —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –∞–ª—É
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_data = base64.b64encode(photo_bytes).decode('utf-8')
        
        claude_prompt = "–ë“±–ª —Å—É—Ä–µ—Ç—Ç—ñ –º“±“õ–∏—è—Ç —Ç–∞–ª–¥–∞–ø, —ñ—à—ñ–Ω–¥–µ–≥—ñ –±–∞—Ä–ª—ã“õ –æ–±—ä–µ–∫—Ç—ñ–ª–µ—Ä–¥—ñ, –±—Ä–µ–Ω–¥—Ç–µ—Ä–¥—ñ, ”©–Ω—ñ–º –∞—Ç–∞—É–ª–∞—Ä—ã–Ω –∂”ô–Ω–µ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω –º”ô—Ç—ñ–Ω–¥—ñ —Å–∏–ø–∞—Ç—Ç–∞–ø –±–µ—Ä. –°–∏–ø–∞—Ç—Ç–∞–º–∞–Ω—ã ”©—Ç–µ –Ω–∞“õ—Ç—ã –∂”ô–Ω–µ —Ç–æ–ª—ã“õ –∂–∞–∑."
        
        claude_response = client_claude.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=500,
            messages=[{"role": "user", "content": [
                {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_data}},
                {"type": "text", "text": claude_prompt}
            ]}]
        )
        image_description = claude_response.content[0].text
        
        # 2-–∫–µ–∑–µ“£: Claude-—Ç—ã“£ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω OpenAI-“ì–∞ –∂—ñ–±–µ—Ä—É
        final_query_to_openai = (
            f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º–∞“ì–∞–Ω —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä–¥—ñ. –ú–µ–Ω –æ–ª —Å—É—Ä–µ—Ç—Ç—ñ —Ç–∞–ª–¥–∞–ø, –º—ã–Ω–∞–¥–∞–π —Å–∏–ø–∞—Ç—Ç–∞–º–∞ –∞–ª–¥—ã–º: "
            f"'{image_description}'. –û—Å—ã —Å–∏–ø–∞—Ç—Ç–∞–º–∞“ì–∞ —Å“Ø–π–µ–Ω—ñ–ø, ”©–∑—ñ“£–Ω—ñ“£ –±—ñ–ª—ñ–º “õ–æ—Ä—ã“£–Ω–∞–Ω (–∂“Ø–∫—Ç–µ–ª–≥–µ–Ω —Ñ–∞–π–ª–¥–∞—Ä–¥–∞–Ω) "
            f"—Å—É—Ä–µ—Ç—Ç–µ–≥—ñ ”©–Ω—ñ–º–Ω—ñ“£ –Ω–µ–º–µ—Å–µ –º–µ–∫–µ–º–µ–Ω—ñ“£ —Ö–∞–ª–∞–ª —Å—Ç–∞—Ç—É—Å—ã —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã —Ç–∞—É—ã–ø, –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä."
        )
        
        openai_response = await run_openai_assistant(final_query_to_openai)
        await update.message.reply_text(openai_response)

    except Exception as e:
        print(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        await update.message.reply_text(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã: {e}")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    print("üöÄ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã... OpenAI Assistants API –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥–µ.")
    app.run_polling()

if __name__ == '__main__':
    main()