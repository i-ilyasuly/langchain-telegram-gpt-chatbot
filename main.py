import os
import base64
import chromadb
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from anthropic import Anthropic
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')
claude = Anthropic(api_key=CLAUDE_API_KEY)

# Embedding –º–æ–¥–µ–ª—ñ–Ω –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª“ì–∞–Ω–¥–∞ –±—ñ—Ä —Ä–µ—Ç –∂“Ø–∫—Ç–µ–ø –∞–ª—É
embedding_model = SentenceTransformer('all-MiniLM-L6-v2')

try:
    client_chroma = chromadb.PersistentClient(path="./db")
    collection = client_chroma.get_collection(name="halal_data")
    print("‚úÖ –í–µ–∫—Ç–æ—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä “õ–æ—Ä—ã–Ω–∞ —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã.")
    
    # --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê–õ–´“ö –ö–û–î ---
    record_count = collection.count()
    print(f"üìä –í–µ–∫—Ç–æ—Ä–ª—ã“õ –±–∞–∑–∞–¥–∞“ì—ã –∂–∞–∑–±–∞–ª–∞—Ä —Å–∞–Ω—ã: {record_count}")
    if record_count == 0:
        print("‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ï–°–ö–ï–†–¢–£: –í–µ–∫—Ç–æ—Ä–ª—ã“õ –±–∞–∑–∞ –±–æ—Å. 'python create_vector_db.py' —Å–∫—Ä–∏–ø—Ç—ñ–Ω “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—ã“£—ã–∑.")
    # ---------------------------

except Exception as e:
    print(f"‚ùå –í–µ–∫—Ç–æ—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä “õ–æ—Ä—ã–Ω —ñ—Å–∫–µ “õ–æ—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
    print("‚ùóÔ∏è –ê–ª–¥—ã–º–µ–Ω 'python create_vector_db.py' —Å–∫—Ä–∏–ø—Ç—ñ–Ω —ñ—Å–∫–µ “õ–æ—Å—ã“£—ã–∑.")
    exit()

SYSTEM_PROMPT = """–°–µ–Ω ‚Äî ¬´–•–∞–ª–∞–ª –î–∞–º—É¬ª –¥–µ—Ä–µ–∫—Ç–µ—Ä “õ–æ—Ä—ã–Ω—ã“£ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ñ—Å—ñ“£. –°–∞“ì–∞–Ω '# –¢–∞–±—ã–ª“ì–∞–Ω “±“õ—Å–∞—Å –¥–µ—Ä–µ–∫—Ç–µ—Ä:' –±”©–ª—ñ–º—ñ–Ω–¥–µ –≤–µ–∫—Ç–æ—Ä–ª—ã“õ —ñ–∑–¥–µ—É –∞—Ä“õ—ã–ª—ã —Ç–∞–±—ã–ª“ì–∞–Ω –µ“£ —Å”ô–π–∫–µ—Å –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä—ñ–ª–µ–¥—ñ. –°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ ‚Äî —Å–æ–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “ì–∞–Ω–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ø, —Å“±—Ä–∞“õ“õ–∞ ”ô–¥–µ–º—ñ–ª–µ–ø, —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –∂–∞—É–∞–ø –±–µ—Ä—É. –ï–≥–µ—Ä –µ—à—Ç–µ“£–µ —Ç–∞–±—ã–ª–º–∞—Å–∞, —Å—ã–ø–∞–π—ã —Ç“Ø—Ä–¥–µ '–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å“±—Ä–∞–Ω—ã—Å—ã“£—ã–∑“ì–∞ —Å”ô–π–∫–µ—Å –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã' –¥–µ–ø –∂–∞—É–∞–ø –±–µ—Ä. ”®–∑—ñ“£–Ω–µ–Ω –∞—Ä—Ç—ã“õ –∞“õ–ø–∞—Ä–∞—Ç “õ–æ—Å–ø–∞."""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°”ô–ª–µ–º! –•–∞–ª–∞–ª –º–µ–∫–µ–º–µ/“õ–æ—Å–ø–∞ —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_query = update.message.text.strip()
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    try:
        # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞—É—ã–Ω –≤–µ–∫—Ç–æ—Ä“ì–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—É
        query_embedding = embedding_model.encode(user_query).tolist()

        # –í–µ–∫—Ç–æ—Ä–ª—ã“õ –±–∞–∑–∞–¥–∞–Ω –µ“£ “±“õ—Å–∞—Å 5 –Ω”ô—Ç–∏–∂–µ–Ω—ñ —ñ–∑–¥–µ—É
        results = collection.query(
            query_embeddings=[query_embedding],
            n_results=5
        )
        
        found_data_text = "\n\n".join(results['documents'][0]) if results['documents'] and results['documents'][0] else "–ï—à—Ç–µ“£–µ —Ç–∞–±—ã–ª–º–∞–¥—ã."

    except Exception as e:
        print(f"–í–µ–∫—Ç–æ—Ä–ª—ã“õ —ñ–∑–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        found_data_text = "–Ü—à–∫—ñ “õ–∞—Ç–µ: –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —ñ–∑–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ –º”ô—Å–µ–ª–µ —Ç—É—ã–Ω–¥–∞–¥—ã."

    final_prompt = f"# –¢–∞–±—ã–ª“ì–∞–Ω “±“õ—Å–∞—Å –¥–µ—Ä–µ–∫—Ç–µ—Ä:\n{found_data_text}\n\n# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã:\n{user_query}"
    try:
        response = claude.messages.create(
            model="claude-3-haiku-20240307", max_tokens=1500, system=SYSTEM_PROMPT,
            messages=[{"role": "user", "content": final_prompt}]
        )
        await update.message.reply_text(response.content[0].text)
    except Exception as e:
        await update.message.reply_text(f"Claude API “õ–∞—Ç–µ—Å—ñ: {e}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_data = base64.b64encode(photo_bytes).decode('utf-8')
        caption = update.message.caption or "–ë“±–ª —Å—É—Ä–µ—Ç—Ç–µ –Ω–µ –±–µ–π–Ω–µ–ª–µ–Ω–≥–µ–Ω? –ú”ô—Ç—ñ–Ω –±–æ–ª—Å–∞, –æ“õ—ã–ø –±–µ—Ä."

        response = claude.messages.create(
            model="claude-3-haiku-20240307", max_tokens=1024,
            messages=[{"role": "user", "content": [
                {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_data}},
                {"type": "text", "text": caption}
            ]}]
        )
        await update.message.reply_text(response.content[0].text)
    except Exception as e:
        await update.message.reply_text(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    print("üöÄ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã... –í–µ–∫—Ç–æ—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä “õ–æ—Ä—ã–º–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥–µ.")
    app.run_polling()

if __name__ == '__main__':
    main()