# main.py
import logging
import httpx
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.error import RetryAfter

from bot.config import TELEGRAM_TOKEN, WEBHOOK_URL
from bot.handlers.common import start, handle_message, handle_photo
from bot.handlers.admin import button_handler
from bot.handlers.conversations import broadcast_conv_handler, update_db_conv_handler

# –ù–µ–≥—ñ–∑–≥—ñ –±–∞–ø—Ç–∞—É–ª–∞—Ä
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Application-–¥—ã –≥–ª–æ–±–∞–ª–¥—ã —Ç“Ø—Ä–¥–µ “õ“±—Ä—É, –±—ñ—Ä–∞“õ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–Ω—ã –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—É
application = Application.builder().token(TELEGRAM_TOKEN).build()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Webhook-—Ç—ã —Ç–µ–∫ –±—ñ—Ä —Ä–µ—Ç –æ—Ä–Ω–∞—Ç—É
    # –ë“±–ª –∫–æ–¥ gunicorn-–Ω—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ –ø—Ä–æ—Ü–µ—Å—ñ–Ω–¥–µ “ì–∞–Ω–∞ –æ—Ä—ã–Ω–¥–∞–ª—É—ã –∫–µ—Ä–µ–∫, –±—ñ—Ä–∞“õ –æ–Ω—ã –∞–Ω—ã“õ—Ç–∞—É “õ–∏—ã–Ω.
    # –°–æ–Ω–¥—ã“õ—Ç–∞–Ω, webhook-—Ç—ã –±”©–ª–µ–∫ —Å–∫—Ä–∏–ø—Ç–ø–µ–Ω –æ—Ä–Ω–∞—Ç—É“ì–∞ –Ω–µ–º–µ—Å–µ –æ—Å—ã–Ω–¥–∞ “õ–∞–ª–¥—ã—Ä—ã–ø,
    # gunicorn –∂“±–º—ã—Å—à—ã–ª–∞—Ä—ã–Ω—ã“£ —Å–∞–Ω—ã–Ω 1-–≥–µ –¥–µ–π—ñ–Ω –∞–∑–∞–π—Ç—É“ì–∞ –±–æ–ª–∞–¥—ã.
    # –ï“£ –¥“±—Ä—ã—Å—ã - webhook-—Ç—ã –±”©–ª–µ–∫ –æ—Ä–Ω–∞—Ç—ã–ø –∞–ª—É.
    # –ë—ñ—Ä–∞“õ “õ–∞–∑—ñ—Ä–≥—ñ –∂–∞“ì–¥–∞–π–¥—ã —Ç“Ø–∑–µ—Ç—É “Ø—à—ñ–Ω webhook-—Ç—ã –æ—Ä–Ω–∞—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ–ª–µ—Ä–¥—ñ “±—Å—Ç–∞–ø –∞–ª–∞–º—ã–∑.

    # –•—ç–Ω–¥–ª–µ—Ä–ª–µ—Ä–¥—ñ —Ç—ñ—Ä–∫–µ—É
    application.add_handler(broadcast_conv_handler)
    application.add_handler(update_db_conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    await application.initialize()
    if WEBHOOK_URL:
        try:
            # Webhook-—Ç—ã –æ—Ä–Ω–∞—Ç—É “Ø—à—ñ–Ω Bot-—Ç—ã –±”©–ª–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
            bot = Bot(token=TELEGRAM_TOKEN)
            webhook_url_with_path = f"{WEBHOOK_URL}/telegram"
            
            # –ê“ì—ã–º–¥–∞“ì—ã webhook –∞“õ–ø–∞—Ä–∞—Ç—ã–Ω –∞–ª—É
            current_webhook_info = await bot.get_webhook_info()

            # –ï–≥–µ—Ä webhook URL –±–∞—Å“õ–∞ –±–æ–ª—Å–∞ “ì–∞–Ω–∞ –∂–∞“£–∞—Ä—Ç—É
            if current_webhook_info.url != webhook_url_with_path:
                await bot.set_webhook(url=webhook_url_with_path, allowed_updates=Update.ALL_TYPES)
                logger.info(f"üöÄ Webhook —Å”ô—Ç—Ç—ñ –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã: {webhook_url_with_path}")
            else:
                logger.info(f"‚ÑπÔ∏è Webhook “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –¥“±—Ä—ã—Å –æ—Ä–Ω–∞—Ç—ã–ª“ì–∞–Ω: {webhook_url_with_path}")

        except RetryAfter as e:
            logger.warning(f"Webhook –æ—Ä–Ω–∞—Ç—É –∫–µ–∑—ñ–Ω–¥–µ Flood control “õ–∞—Ç–µ—Å—ñ: {e}. –ë“±–ª gunicorn-–Ω—ã“£ –±—ñ—Ä–Ω–µ—à–µ –∂“±–º—ã—Å—à—ã—Å—ã–º–µ–Ω “õ–∞–ª—ã–ø—Ç—ã –∂–∞“ì–¥–∞–π.")
        except Exception as e:
            logger.error(f"Webhook –æ—Ä–Ω–∞—Ç—É –∫–µ–∑—ñ–Ω–¥–µ –±–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ: {e}")
    else:
        logger.warning("‚ÑπÔ∏è WEBHOOK_URL –∂–∞—Ä–∞–º—Å—ã–∑, –±–æ—Ç Webhook-—Å—ã–∑ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã.")
        await application.bot.delete_webhook()
    
    yield
    
    await application.shutdown()
    logger.info("üîö –ë–æ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.")


app_fastapi = FastAPI(lifespan=lifespan)

@app_fastapi.post("/telegram")
async def telegram_webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    await application.process_update(update)
    return {"status": "ok"}

@app_fastapi.get("/")
def index():
    return {"message": "Telegram Bot webhook —Ä–µ–∂–∏–º—ñ–Ω–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä."}