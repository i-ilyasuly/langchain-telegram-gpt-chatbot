import os
import time
import base64
import csv
import pandas as pd
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from anthropic import Anthropic
from openai import OpenAI
from dotenv import load_dotenv

# --- API –∫—ñ–ª—Ç—Ç–µ—Ä–¥—ñ –∂”ô–Ω–µ –±–∞–ø—Ç–∞—É–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')

# --- –ê–¥–º–∏–Ω–¥–µ—Ä–¥—ñ“£ ID —Ç—ñ–∑—ñ–º—ñ ---
ADMIN_USER_IDS = [929307596] # ”®–∑ ID-—ã“£—ã–∑–¥—ã –æ—Å—ã–Ω–¥–∞ –∂–∞–∑—ã“£—ã–∑

# API –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä—ñ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
client_claude = Anthropic(api_key=CLAUDE_API_KEY)
client_openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Telegram –ë–æ—Ç—Ç—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ –ª–æ–≥–∏–∫–∞—Å—ã ---

# main.py —Ñ–∞–π–ª—ã–Ω–¥–∞“ì—ã start —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω –æ—Å—ã–ª–∞–π ”©–∑–≥–µ—Ä—Ç—ñ“£—ñ–∑

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ –∂”ô–Ω–µ –±–æ—Ç—Ç—ã“£ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–Ω —Ç–∞–Ω—ã—Å—Ç—ã—Ä–∞–¥—ã."""
    context.user_data.pop('thread_id', None)
    user_id = update.effective_user.id
    
    welcome_text = (
        "Assalamualaikum, “õ“±—Ä–º–µ—Ç—Ç—ñ –±–∞—É—ã—Ä—ã–º! –ú–µ–Ω ¬´–•–∞–ª–∞–ª –î–∞–º—É¬ª “±–π—ã–º—ã–Ω—ã“£ —Ä–µ—Å–º–∏ –¥–µ—Ä–µ–∫—Ç–µ—Ä “õ–æ—Ä—ã–Ω–∞ –Ω–µ–≥—ñ–∑–¥–µ–ª–≥–µ–Ω –∫”©–º–µ–∫—à—ñ –±–æ—Ç–ø—ã–Ω.\n\n"
        "**–ù–µ–≥—ñ–∑–≥—ñ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä:**\n"
        "üìù **–ú”ô—Ç—ñ–Ω–º–µ–Ω —Å“±—Ä–∞—É:** –ö–µ–∑ –∫–µ–ª–≥–µ–Ω ”©–Ω—ñ–º–Ω—ñ“£, –º–µ–∫–µ–º–µ–Ω—ñ“£ –Ω–µ–º–µ—Å–µ E-“õ–æ—Å–ø–∞–Ω—ã“£ –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã–ø, –æ–Ω—ã“£ —Ö–∞–ª–∞–ª —Å—Ç–∞—Ç—É—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.\n"
        "üì∏ **–°—É—Ä–µ—Ç–ø–µ–Ω —Ç–∞–ª–¥–∞—É:** ”®–Ω—ñ–º–Ω—ñ“£ –Ω–µ–º–µ—Å–µ –æ–Ω—ã“£ “õ“±—Ä–∞–º—ã–Ω—ã“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ–ø, —Ö–∞–ª–∞–ª –µ–∫–µ–Ω–¥—ñ–≥—ñ–Ω —Å“±—Ä–∞“£—ã–∑.\n\n"
        "–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑–∞ –±–µ—Ä—ñ“£—ñ–∑."
    )
    
    # –ï–≥–µ—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã –∞–¥–º–∏–Ω –±–æ–ª—Å–∞, –æ“ì–∞–Ω “õ–æ—Å—ã–º—à–∞ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä—É
    if user_id in ADMIN_USER_IDS:
        welcome_text += "\n\n"
        welcome_text += "üîê **–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã:**\n"
        welcome_text += "`/feedback_stats` - –ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã–Ω –∫”©—Ä—É."

    await update.message.reply_text(welcome_text, parse_mode='HTML')

async def run_openai_assistant(user_query: str, thread_id: str | None) -> tuple[str, str]:
    if not OPENAI_ASSISTANT_ID: return "“ö–∞—Ç–µ: OPENAI_ASSISTANT_ID .env —Ñ–∞–π–ª—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω.", thread_id
    try:
        if thread_id is None: thread = client_openai.beta.threads.create(); thread_id = thread.id
        client_openai.beta.threads.messages.create(thread_id=thread_id, role="user", content=user_query)
        run = client_openai.beta.threads.runs.create(thread_id=thread_id, assistant_id=OPENAI_ASSISTANT_ID)
        while run.status in ['in_progress', 'queued']:
            time.sleep(1)
            run = client_openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run.status == 'completed':
            messages = client_openai.beta.threads.messages.list(thread_id=thread_id)
            return messages.data[0].content[0].text.value, thread_id
        else:
            error_message = run.last_error.message if run.last_error else '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'
            return f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {error_message}", thread_id
    except Exception as e: return f"OpenAI Assistant-–ø–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã: {e}", thread_id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user_query = update.message.text.strip()
    waiting_message = await update.message.reply_text("‚è≥ –ñ–∞—É–∞–ø –¥–∞–π—ã–Ω–¥–∞–ª—É–¥–∞...")
    thread_id = context.user_data.get('thread_id')
    response_text, new_thread_id = await run_openai_assistant(user_query, thread_id)
    context.user_data['thread_id'] = new_thread_id
    await waiting_message.edit_text(response_text, reply_markup=reply_markup)
    context.user_data[f'last_question_{waiting_message.message_id}'] = user_query
    context.user_data[f'last_answer_{waiting_message.message_id}'] = response_text

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üëç", callback_data='like'), InlineKeyboardButton("üëé", callback_data='dislike')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    waiting_message = await update.message.reply_text("‚è≥ –°—É—Ä–µ—Ç —Ç–∞–ª–¥–∞–Ω—ã–ø –∂–∞—Ç—ã—Ä...")
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_data = base64.b64encode(photo_bytes).decode('utf-8')
        claude_prompt = "–°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ - —Å—É—Ä–µ—Ç—Ç–µ–Ω —Ç–µ–∫ “õ–∞–Ω–∞ '–•–∞–ª–∞–ª –î–∞–º—É' –¥–µ—Ä–µ–∫“õ–æ—Ä—ã–Ω–∞–Ω —ñ–∑–¥–µ—É–≥–µ –±–æ–ª–∞—Ç—ã–Ω –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –∞–Ω—ã“õ—Ç–∞—É. –ñ–∞–ª–ø—ã —Å–∏–ø–∞—Ç—Ç–∞–º–∞ “õ–∞–∂–µ—Ç –µ–º–µ—Å.\n\n–ë–∞—Å—Ç—ã –Ω–∞–∑–∞—Ä–¥—ã –º—ã–Ω–∞–ª–∞—Ä“ì–∞ –∞—É–¥–∞—Ä:\n1. ”®–Ω—ñ–º–Ω—ñ“£ –Ω–µ–º–µ—Å–µ –±—Ä–µ–Ω–¥—Ç—ñ“£ –∞—Ç–∞—É—ã.\n2. –ú–µ–∫–µ–º–µ–Ω—ñ“£ –∞—Ç–∞—É—ã.\n3. ”®–Ω—ñ–º “õ“±—Ä–∞–º—ã–Ω–¥–∞“ì—ã –ï-“õ–æ—Å–ø–∞–ª–∞—Ä–¥—ã“£ –∫–æ–¥—Ç–∞—Ä—ã.\n\n–¢–µ–∫ –æ—Å—ã —Ç–∞–±—ã–ª“ì–∞–Ω –Ω–∞“õ—Ç—ã –∞—Ç–∞—É–ª–∞—Ä–¥—ã –Ω–µ–º–µ—Å–µ –∫–æ–¥—Ç–∞—Ä–¥—ã —Ç—ñ–∑—ñ–º —Ä–µ—Ç—ñ–Ω–¥–µ, ”ô—Ä“õ–∞–π—Å—ã—Å—ã–Ω –∂–∞“£–∞ –∂–æ–ª–¥–∞–Ω –∂–∞–∑—ã–ø –±–µ—Ä. –ï–≥–µ—Ä –æ—Å—ã–Ω–¥–∞–π –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞—Å–∞, '–ú–∞“£—ã–∑–¥—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã' –¥–µ–ø –∂–∞—É–∞–ø –±–µ—Ä."
        claude_response = client_claude.messages.create(model="claude-3-haiku-20240307", max_tokens=500, messages=[{"role": "user", "content": [{"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": image_data}}, {"type": "text", "text": claude_prompt}]}])
        image_description = claude_response.content[0].text
        final_query_to_openai = f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º–∞“ì–∞–Ω ”©–Ω—ñ–º–Ω—ñ“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä–¥—ñ. –°—É—Ä–µ—Ç—Ç–µ–Ω –∫–µ–ª–µ—Å—ñ–¥–µ–π –∞—Ç–∞—É–ª–∞—Ä –∞–Ω—ã“õ—Ç–∞–ª–¥—ã: '{image_description}'. –û—Å—ã –∞—Ç–∞—É–ª–∞—Ä–¥—ã“£ —Ö–∞–ª–∞–ª —Å—Ç–∞—Ç—É—Å—ã–Ω ”©–∑—ñ“£–Ω—ñ“£ –±—ñ–ª—ñ–º “õ–æ—Ä—ã“£–Ω–∞–Ω (–∂“Ø–∫—Ç–µ–ª–≥–µ–Ω —Ñ–∞–π–ª–¥–∞—Ä–¥–∞–Ω) —Ç–µ–∫—Å–µ—Ä—ñ–ø, –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ç–æ–ª—ã“õ –∂–∞—É–∞–ø –±–µ—Ä."
        await waiting_message.edit_text("‚è≥ –ê“õ–ø–∞—Ä–∞—Ç—Ç—ã —ñ–∑–¥–µ—É–¥–µ–º—ñ–Ω...")
        thread_id = context.user_data.get('thread_id')
        openai_response, new_thread_id = await run_openai_assistant(final_query_to_openai, thread_id)
        context.user_data['thread_id'] = new_thread_id
        await waiting_message.edit_text(openai_response, reply_markup=reply_markup)
        context.user_data[f'last_question_{waiting_message.message_id}'] = f"Image Query: {image_description}"
        context.user_data[f'last_answer_{waiting_message.message_id}'] = openai_response
    except Exception as e: await waiting_message.edit_text(f"–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç!")
    await query.edit_message_reply_markup(reply_markup=None)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_id = query.from_user.id
    vote = query.data
    message_id = query.message.message_id
    question = context.user_data.get(f'last_question_{message_id}', '–°“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã')
    bot_answer = context.user_data.get(f'last_answer_{message_id}', '–ñ–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã')
    file_exists = os.path.isfile('feedback.csv')
    with open('feedback.csv', 'a', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['timestamp', 'user_id', 'question', 'bot_answer', 'vote']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists: writer.writeheader()
        writer.writerow({'timestamp': timestamp, 'user_id': user_id, 'question': question, 'bot_answer': bot_answer, 'vote': vote})
    print(f"–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å 'feedback.csv' —Ñ–∞–π–ª—ã–Ω–∞ —Å–∞“õ—Ç–∞–ª–¥—ã: User {user_id} '{vote}' –¥–µ–ø –±–∞—Å—Ç—ã.")

async def feedback_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ –∞–¥–º–∏–Ω–¥–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")
        return
    try:
        df = pd.read_csv('feedback.csv')
        total_feedback = len(df)
        likes = (df['vote'] == 'like').sum()
        dislikes = (df['vote'] == 'dislike').sum()
        response_text = (f"üìä **–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã**\n\n"
                         f"üîπ **–ë–∞—Ä–ª—ã“ì—ã:** {total_feedback} –±–∞“ì–∞\n"
                         f"üëç **–õ–∞–π–∫:** {likes}\n"
                         f"üëé **–î–∏–∑–ª–∞–π–∫:** {dislikes}")
        await update.message.reply_text(response_text, parse_mode='HTML')
    except FileNotFoundError:
        await update.message.reply_text("”ò–∑—ñ—Ä–≥–µ –∫–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å –∂–æ“õ.")
    except Exception as e:
        await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –µ—Å–µ–ø—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("feedback_stats", feedback_stats))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è–Ω—ã ”©“£–¥–µ–π—Ç—ñ–Ω handler –∞–ª—ã–ø —Ç–∞—Å—Ç–∞–ª–¥—ã
    # app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    app.add_handler(CallbackQueryHandler(button_callback))
    
    print("üöÄ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã... OpenAI Assistants API –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥–µ.")
    app.run_polling()

if __name__ == '__main__':
    main()